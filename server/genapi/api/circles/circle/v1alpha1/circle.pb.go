// (-- api-linter: core::0191::java-outer-classname=disabled
//     aip.dev/not-precedent: I don't care about java. --)
// (-- api-linter: core::0191::java-multiple-files=disabled
//     aip.dev/not-precedent: I don't care about java. --)
// (-- api-linter: core::0191::java-package=disabled
//     aip.dev/not-precedent: I don't care about java. --)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: api/circles/circle/v1alpha1/circle.proto

package circlev1alpha1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// the main user circle
type Circle struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the name of the circle
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the title of the circle
	Title         string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Circle) Reset() {
	*x = Circle{}
	mi := &file_api_circles_circle_v1alpha1_circle_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Circle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Circle) ProtoMessage() {}

func (x *Circle) ProtoReflect() protoreflect.Message {
	mi := &file_api_circles_circle_v1alpha1_circle_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Circle.ProtoReflect.Descriptor instead.
func (*Circle) Descriptor() ([]byte, []int) {
	return file_api_circles_circle_v1alpha1_circle_proto_rawDescGZIP(), []int{0}
}

func (x *Circle) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Circle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

var File_api_circles_circle_v1alpha1_circle_proto protoreflect.FileDescriptor

const file_api_circles_circle_v1alpha1_circle_proto_rawDesc = "" +
	"\n" +
	"(api/circles/circle/v1alpha1/circle.proto\x12\x1bapi.circles.circle.v1alpha1\x1a\x1cgoogle/api/annotations.proto\x1a\x17google/api/client.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a\x19google/api/resource.proto\"\x86\x01\n" +
	"\x06Circle\x12\x17\n" +
	"\x04name\x18\x01 \x01(\tB\x03\xe0A\bR\x04name\x12\x19\n" +
	"\x05title\x18\x02 \x01(\tB\x03\xe0A\x02R\x05title:H\xeaAE\n" +
	" api.meals.circle.v1alpha1/Circle\x12\x10circles/{circle}*\acircles2\x06circleB\x91\x02\n" +
	"\x1fcom.api.circles.circle.v1alpha1B\vCircleProtoP\x01ZRgithub.com/jcfug8/daylear/server/genapi/api/circles/circle/v1alpha1;circlev1alpha1\xa2\x02\x03ACC\xaa\x02\x1bApi.Circles.Circle.V1alpha1\xca\x02\x1bApi\\Circles\\Circle\\V1alpha1\xe2\x02'Api\\Circles\\Circle\\V1alpha1\\GPBMetadata\xea\x02\x1eApi::Circles::Circle::V1alpha1b\x06proto3"

var (
	file_api_circles_circle_v1alpha1_circle_proto_rawDescOnce sync.Once
	file_api_circles_circle_v1alpha1_circle_proto_rawDescData []byte
)

func file_api_circles_circle_v1alpha1_circle_proto_rawDescGZIP() []byte {
	file_api_circles_circle_v1alpha1_circle_proto_rawDescOnce.Do(func() {
		file_api_circles_circle_v1alpha1_circle_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_circles_circle_v1alpha1_circle_proto_rawDesc), len(file_api_circles_circle_v1alpha1_circle_proto_rawDesc)))
	})
	return file_api_circles_circle_v1alpha1_circle_proto_rawDescData
}

var file_api_circles_circle_v1alpha1_circle_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_api_circles_circle_v1alpha1_circle_proto_goTypes = []any{
	(*Circle)(nil), // 0: api.circles.circle.v1alpha1.Circle
}
var file_api_circles_circle_v1alpha1_circle_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_api_circles_circle_v1alpha1_circle_proto_init() }
func file_api_circles_circle_v1alpha1_circle_proto_init() {
	if File_api_circles_circle_v1alpha1_circle_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_circles_circle_v1alpha1_circle_proto_rawDesc), len(file_api_circles_circle_v1alpha1_circle_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_circles_circle_v1alpha1_circle_proto_goTypes,
		DependencyIndexes: file_api_circles_circle_v1alpha1_circle_proto_depIdxs,
		MessageInfos:      file_api_circles_circle_v1alpha1_circle_proto_msgTypes,
	}.Build()
	File_api_circles_circle_v1alpha1_circle_proto = out.File
	file_api_circles_circle_v1alpha1_circle_proto_goTypes = nil
	file_api_circles_circle_v1alpha1_circle_proto_depIdxs = nil
}
