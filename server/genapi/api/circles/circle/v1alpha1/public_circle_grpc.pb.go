// (-- api-linter: core::0191::java-outer-classname=disabled
//     aip.dev/not-precedent: I don't care about java. --)
// (-- api-linter: core::0191::java-multiple-files=disabled
//     aip.dev/not-precedent: I don't care about java. --)
// (-- api-linter: core::0191::java-package=disabled
//     aip.dev/not-precedent: I don't care about java. --)

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/circles/circle/v1alpha1/public_circle.proto

package circlev1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PublicCircleService_ListPublicCircles_FullMethodName = "/api.circles.circle.v1alpha1.PublicCircleService/ListPublicCircles"
	PublicCircleService_GetPublicCircle_FullMethodName   = "/api.circles.circle.v1alpha1.PublicCircleService/GetPublicCircle"
)

// PublicCircleServiceClient is the client API for PublicCircleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// the public circle service
type PublicCircleServiceClient interface {
	// list public circles
	ListPublicCircles(ctx context.Context, in *ListPublicCirclesRequest, opts ...grpc.CallOption) (*ListPublicCirclesResponse, error)
	// get a public circle
	GetPublicCircle(ctx context.Context, in *GetPublicCircleRequest, opts ...grpc.CallOption) (*PublicCircle, error)
}

type publicCircleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicCircleServiceClient(cc grpc.ClientConnInterface) PublicCircleServiceClient {
	return &publicCircleServiceClient{cc}
}

func (c *publicCircleServiceClient) ListPublicCircles(ctx context.Context, in *ListPublicCirclesRequest, opts ...grpc.CallOption) (*ListPublicCirclesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPublicCirclesResponse)
	err := c.cc.Invoke(ctx, PublicCircleService_ListPublicCircles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicCircleServiceClient) GetPublicCircle(ctx context.Context, in *GetPublicCircleRequest, opts ...grpc.CallOption) (*PublicCircle, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublicCircle)
	err := c.cc.Invoke(ctx, PublicCircleService_GetPublicCircle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicCircleServiceServer is the server API for PublicCircleService service.
// All implementations must embed UnimplementedPublicCircleServiceServer
// for forward compatibility.
//
// the public circle service
type PublicCircleServiceServer interface {
	// list public circles
	ListPublicCircles(context.Context, *ListPublicCirclesRequest) (*ListPublicCirclesResponse, error)
	// get a public circle
	GetPublicCircle(context.Context, *GetPublicCircleRequest) (*PublicCircle, error)
	mustEmbedUnimplementedPublicCircleServiceServer()
}

// UnimplementedPublicCircleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPublicCircleServiceServer struct{}

func (UnimplementedPublicCircleServiceServer) ListPublicCircles(context.Context, *ListPublicCirclesRequest) (*ListPublicCirclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublicCircles not implemented")
}
func (UnimplementedPublicCircleServiceServer) GetPublicCircle(context.Context, *GetPublicCircleRequest) (*PublicCircle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicCircle not implemented")
}
func (UnimplementedPublicCircleServiceServer) mustEmbedUnimplementedPublicCircleServiceServer() {}
func (UnimplementedPublicCircleServiceServer) testEmbeddedByValue()                             {}

// UnsafePublicCircleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicCircleServiceServer will
// result in compilation errors.
type UnsafePublicCircleServiceServer interface {
	mustEmbedUnimplementedPublicCircleServiceServer()
}

func RegisterPublicCircleServiceServer(s grpc.ServiceRegistrar, srv PublicCircleServiceServer) {
	// If the following call pancis, it indicates UnimplementedPublicCircleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PublicCircleService_ServiceDesc, srv)
}

func _PublicCircleService_ListPublicCircles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPublicCirclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicCircleServiceServer).ListPublicCircles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicCircleService_ListPublicCircles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicCircleServiceServer).ListPublicCircles(ctx, req.(*ListPublicCirclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicCircleService_GetPublicCircle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicCircleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicCircleServiceServer).GetPublicCircle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicCircleService_GetPublicCircle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicCircleServiceServer).GetPublicCircle(ctx, req.(*GetPublicCircleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicCircleService_ServiceDesc is the grpc.ServiceDesc for PublicCircleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicCircleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.circles.circle.v1alpha1.PublicCircleService",
	HandlerType: (*PublicCircleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPublicCircles",
			Handler:    _PublicCircleService_ListPublicCircles_Handler,
		},
		{
			MethodName: "GetPublicCircle",
			Handler:    _PublicCircleService_GetPublicCircle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/circles/circle/v1alpha1/public_circle.proto",
}
