// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/circles/circle/v1alpha1/circle.proto

package circlev1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CircleService_CreateCircle_FullMethodName     = "/api.circles.circle.v1alpha1.CircleService/CreateCircle"
	CircleService_ListCircles_FullMethodName      = "/api.circles.circle.v1alpha1.CircleService/ListCircles"
	CircleService_UpdateCircle_FullMethodName     = "/api.circles.circle.v1alpha1.CircleService/UpdateCircle"
	CircleService_DeleteCircle_FullMethodName     = "/api.circles.circle.v1alpha1.CircleService/DeleteCircle"
	CircleService_GetCircle_FullMethodName        = "/api.circles.circle.v1alpha1.CircleService/GetCircle"
	CircleService_FavoriteCircle_FullMethodName   = "/api.circles.circle.v1alpha1.CircleService/FavoriteCircle"
	CircleService_UnfavoriteCircle_FullMethodName = "/api.circles.circle.v1alpha1.CircleService/UnfavoriteCircle"
)

// CircleServiceClient is the client API for CircleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// the circle service
type CircleServiceClient interface {
	// create a circle
	CreateCircle(ctx context.Context, in *CreateCircleRequest, opts ...grpc.CallOption) (*Circle, error)
	// list circles
	ListCircles(ctx context.Context, in *ListCirclesRequest, opts ...grpc.CallOption) (*ListCirclesResponse, error)
	// update a circle
	UpdateCircle(ctx context.Context, in *UpdateCircleRequest, opts ...grpc.CallOption) (*Circle, error)
	// delete` a circle
	DeleteCircle(ctx context.Context, in *DeleteCircleRequest, opts ...grpc.CallOption) (*Circle, error)
	// get a circle
	GetCircle(ctx context.Context, in *GetCircleRequest, opts ...grpc.CallOption) (*Circle, error)
	// favorite a circle
	FavoriteCircle(ctx context.Context, in *FavoriteCircleRequest, opts ...grpc.CallOption) (*FavoriteCircleResponse, error)
	// unfavorite a circle
	UnfavoriteCircle(ctx context.Context, in *UnfavoriteCircleRequest, opts ...grpc.CallOption) (*UnfavoriteCircleResponse, error)
}

type circleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCircleServiceClient(cc grpc.ClientConnInterface) CircleServiceClient {
	return &circleServiceClient{cc}
}

func (c *circleServiceClient) CreateCircle(ctx context.Context, in *CreateCircleRequest, opts ...grpc.CallOption) (*Circle, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Circle)
	err := c.cc.Invoke(ctx, CircleService_CreateCircle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleServiceClient) ListCircles(ctx context.Context, in *ListCirclesRequest, opts ...grpc.CallOption) (*ListCirclesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCirclesResponse)
	err := c.cc.Invoke(ctx, CircleService_ListCircles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleServiceClient) UpdateCircle(ctx context.Context, in *UpdateCircleRequest, opts ...grpc.CallOption) (*Circle, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Circle)
	err := c.cc.Invoke(ctx, CircleService_UpdateCircle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleServiceClient) DeleteCircle(ctx context.Context, in *DeleteCircleRequest, opts ...grpc.CallOption) (*Circle, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Circle)
	err := c.cc.Invoke(ctx, CircleService_DeleteCircle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleServiceClient) GetCircle(ctx context.Context, in *GetCircleRequest, opts ...grpc.CallOption) (*Circle, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Circle)
	err := c.cc.Invoke(ctx, CircleService_GetCircle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleServiceClient) FavoriteCircle(ctx context.Context, in *FavoriteCircleRequest, opts ...grpc.CallOption) (*FavoriteCircleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FavoriteCircleResponse)
	err := c.cc.Invoke(ctx, CircleService_FavoriteCircle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circleServiceClient) UnfavoriteCircle(ctx context.Context, in *UnfavoriteCircleRequest, opts ...grpc.CallOption) (*UnfavoriteCircleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnfavoriteCircleResponse)
	err := c.cc.Invoke(ctx, CircleService_UnfavoriteCircle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CircleServiceServer is the server API for CircleService service.
// All implementations must embed UnimplementedCircleServiceServer
// for forward compatibility.
//
// the circle service
type CircleServiceServer interface {
	// create a circle
	CreateCircle(context.Context, *CreateCircleRequest) (*Circle, error)
	// list circles
	ListCircles(context.Context, *ListCirclesRequest) (*ListCirclesResponse, error)
	// update a circle
	UpdateCircle(context.Context, *UpdateCircleRequest) (*Circle, error)
	// delete` a circle
	DeleteCircle(context.Context, *DeleteCircleRequest) (*Circle, error)
	// get a circle
	GetCircle(context.Context, *GetCircleRequest) (*Circle, error)
	// favorite a circle
	FavoriteCircle(context.Context, *FavoriteCircleRequest) (*FavoriteCircleResponse, error)
	// unfavorite a circle
	UnfavoriteCircle(context.Context, *UnfavoriteCircleRequest) (*UnfavoriteCircleResponse, error)
	mustEmbedUnimplementedCircleServiceServer()
}

// UnimplementedCircleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCircleServiceServer struct{}

func (UnimplementedCircleServiceServer) CreateCircle(context.Context, *CreateCircleRequest) (*Circle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCircle not implemented")
}
func (UnimplementedCircleServiceServer) ListCircles(context.Context, *ListCirclesRequest) (*ListCirclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCircles not implemented")
}
func (UnimplementedCircleServiceServer) UpdateCircle(context.Context, *UpdateCircleRequest) (*Circle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCircle not implemented")
}
func (UnimplementedCircleServiceServer) DeleteCircle(context.Context, *DeleteCircleRequest) (*Circle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCircle not implemented")
}
func (UnimplementedCircleServiceServer) GetCircle(context.Context, *GetCircleRequest) (*Circle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCircle not implemented")
}
func (UnimplementedCircleServiceServer) FavoriteCircle(context.Context, *FavoriteCircleRequest) (*FavoriteCircleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteCircle not implemented")
}
func (UnimplementedCircleServiceServer) UnfavoriteCircle(context.Context, *UnfavoriteCircleRequest) (*UnfavoriteCircleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfavoriteCircle not implemented")
}
func (UnimplementedCircleServiceServer) mustEmbedUnimplementedCircleServiceServer() {}
func (UnimplementedCircleServiceServer) testEmbeddedByValue()                       {}

// UnsafeCircleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CircleServiceServer will
// result in compilation errors.
type UnsafeCircleServiceServer interface {
	mustEmbedUnimplementedCircleServiceServer()
}

func RegisterCircleServiceServer(s grpc.ServiceRegistrar, srv CircleServiceServer) {
	// If the following call pancis, it indicates UnimplementedCircleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CircleService_ServiceDesc, srv)
}

func _CircleService_CreateCircle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCircleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleServiceServer).CreateCircle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CircleService_CreateCircle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleServiceServer).CreateCircle(ctx, req.(*CreateCircleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircleService_ListCircles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCirclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleServiceServer).ListCircles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CircleService_ListCircles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleServiceServer).ListCircles(ctx, req.(*ListCirclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircleService_UpdateCircle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCircleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleServiceServer).UpdateCircle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CircleService_UpdateCircle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleServiceServer).UpdateCircle(ctx, req.(*UpdateCircleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircleService_DeleteCircle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCircleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleServiceServer).DeleteCircle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CircleService_DeleteCircle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleServiceServer).DeleteCircle(ctx, req.(*DeleteCircleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircleService_GetCircle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCircleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleServiceServer).GetCircle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CircleService_GetCircle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleServiceServer).GetCircle(ctx, req.(*GetCircleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircleService_FavoriteCircle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteCircleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleServiceServer).FavoriteCircle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CircleService_FavoriteCircle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleServiceServer).FavoriteCircle(ctx, req.(*FavoriteCircleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircleService_UnfavoriteCircle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfavoriteCircleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleServiceServer).UnfavoriteCircle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CircleService_UnfavoriteCircle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleServiceServer).UnfavoriteCircle(ctx, req.(*UnfavoriteCircleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CircleService_ServiceDesc is the grpc.ServiceDesc for CircleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CircleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.circles.circle.v1alpha1.CircleService",
	HandlerType: (*CircleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCircle",
			Handler:    _CircleService_CreateCircle_Handler,
		},
		{
			MethodName: "ListCircles",
			Handler:    _CircleService_ListCircles_Handler,
		},
		{
			MethodName: "UpdateCircle",
			Handler:    _CircleService_UpdateCircle_Handler,
		},
		{
			MethodName: "DeleteCircle",
			Handler:    _CircleService_DeleteCircle_Handler,
		},
		{
			MethodName: "GetCircle",
			Handler:    _CircleService_GetCircle_Handler,
		},
		{
			MethodName: "FavoriteCircle",
			Handler:    _CircleService_FavoriteCircle_Handler,
		},
		{
			MethodName: "UnfavoriteCircle",
			Handler:    _CircleService_UnfavoriteCircle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/circles/circle/v1alpha1/circle.proto",
}
