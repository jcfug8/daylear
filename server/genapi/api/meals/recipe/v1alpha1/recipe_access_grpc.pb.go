// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/meals/recipe/v1alpha1/recipe_access.proto

package recipev1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RecipeAccessService_CreateAccess_FullMethodName       = "/api.meals.recipe.v1alpha1.RecipeAccessService/CreateAccess"
	RecipeAccessService_DeleteAccess_FullMethodName       = "/api.meals.recipe.v1alpha1.RecipeAccessService/DeleteAccess"
	RecipeAccessService_GetAccess_FullMethodName          = "/api.meals.recipe.v1alpha1.RecipeAccessService/GetAccess"
	RecipeAccessService_ListAccesses_FullMethodName       = "/api.meals.recipe.v1alpha1.RecipeAccessService/ListAccesses"
	RecipeAccessService_UpdateAccess_FullMethodName       = "/api.meals.recipe.v1alpha1.RecipeAccessService/UpdateAccess"
	RecipeAccessService_AcceptRecipeAccess_FullMethodName = "/api.meals.recipe.v1alpha1.RecipeAccessService/AcceptRecipeAccess"
)

// RecipeAccessServiceClient is the client API for RecipeAccessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The recipe recipient list service
type RecipeAccessServiceClient interface {
	// Create an access to a recipe
	CreateAccess(ctx context.Context, in *CreateAccessRequest, opts ...grpc.CallOption) (*Access, error)
	// Delete an access to a recipe
	DeleteAccess(ctx context.Context, in *DeleteAccessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get an access to a recipe
	GetAccess(ctx context.Context, in *GetAccessRequest, opts ...grpc.CallOption) (*Access, error)
	// List accesses to a recipe
	ListAccesses(ctx context.Context, in *ListAccessesRequest, opts ...grpc.CallOption) (*ListAccessesResponse, error)
	// Update an access to a recipe
	UpdateAccess(ctx context.Context, in *UpdateAccessRequest, opts ...grpc.CallOption) (*Access, error)
	// Accept a recipe access
	AcceptRecipeAccess(ctx context.Context, in *AcceptRecipeAccessRequest, opts ...grpc.CallOption) (*AcceptRecipeAccessResponse, error)
}

type recipeAccessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecipeAccessServiceClient(cc grpc.ClientConnInterface) RecipeAccessServiceClient {
	return &recipeAccessServiceClient{cc}
}

func (c *recipeAccessServiceClient) CreateAccess(ctx context.Context, in *CreateAccessRequest, opts ...grpc.CallOption) (*Access, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Access)
	err := c.cc.Invoke(ctx, RecipeAccessService_CreateAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeAccessServiceClient) DeleteAccess(ctx context.Context, in *DeleteAccessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RecipeAccessService_DeleteAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeAccessServiceClient) GetAccess(ctx context.Context, in *GetAccessRequest, opts ...grpc.CallOption) (*Access, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Access)
	err := c.cc.Invoke(ctx, RecipeAccessService_GetAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeAccessServiceClient) ListAccesses(ctx context.Context, in *ListAccessesRequest, opts ...grpc.CallOption) (*ListAccessesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccessesResponse)
	err := c.cc.Invoke(ctx, RecipeAccessService_ListAccesses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeAccessServiceClient) UpdateAccess(ctx context.Context, in *UpdateAccessRequest, opts ...grpc.CallOption) (*Access, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Access)
	err := c.cc.Invoke(ctx, RecipeAccessService_UpdateAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeAccessServiceClient) AcceptRecipeAccess(ctx context.Context, in *AcceptRecipeAccessRequest, opts ...grpc.CallOption) (*AcceptRecipeAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptRecipeAccessResponse)
	err := c.cc.Invoke(ctx, RecipeAccessService_AcceptRecipeAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecipeAccessServiceServer is the server API for RecipeAccessService service.
// All implementations must embed UnimplementedRecipeAccessServiceServer
// for forward compatibility.
//
// The recipe recipient list service
type RecipeAccessServiceServer interface {
	// Create an access to a recipe
	CreateAccess(context.Context, *CreateAccessRequest) (*Access, error)
	// Delete an access to a recipe
	DeleteAccess(context.Context, *DeleteAccessRequest) (*emptypb.Empty, error)
	// Get an access to a recipe
	GetAccess(context.Context, *GetAccessRequest) (*Access, error)
	// List accesses to a recipe
	ListAccesses(context.Context, *ListAccessesRequest) (*ListAccessesResponse, error)
	// Update an access to a recipe
	UpdateAccess(context.Context, *UpdateAccessRequest) (*Access, error)
	// Accept a recipe access
	AcceptRecipeAccess(context.Context, *AcceptRecipeAccessRequest) (*AcceptRecipeAccessResponse, error)
	mustEmbedUnimplementedRecipeAccessServiceServer()
}

// UnimplementedRecipeAccessServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecipeAccessServiceServer struct{}

func (UnimplementedRecipeAccessServiceServer) CreateAccess(context.Context, *CreateAccessRequest) (*Access, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccess not implemented")
}
func (UnimplementedRecipeAccessServiceServer) DeleteAccess(context.Context, *DeleteAccessRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccess not implemented")
}
func (UnimplementedRecipeAccessServiceServer) GetAccess(context.Context, *GetAccessRequest) (*Access, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccess not implemented")
}
func (UnimplementedRecipeAccessServiceServer) ListAccesses(context.Context, *ListAccessesRequest) (*ListAccessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccesses not implemented")
}
func (UnimplementedRecipeAccessServiceServer) UpdateAccess(context.Context, *UpdateAccessRequest) (*Access, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccess not implemented")
}
func (UnimplementedRecipeAccessServiceServer) AcceptRecipeAccess(context.Context, *AcceptRecipeAccessRequest) (*AcceptRecipeAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptRecipeAccess not implemented")
}
func (UnimplementedRecipeAccessServiceServer) mustEmbedUnimplementedRecipeAccessServiceServer() {}
func (UnimplementedRecipeAccessServiceServer) testEmbeddedByValue()                             {}

// UnsafeRecipeAccessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecipeAccessServiceServer will
// result in compilation errors.
type UnsafeRecipeAccessServiceServer interface {
	mustEmbedUnimplementedRecipeAccessServiceServer()
}

func RegisterRecipeAccessServiceServer(s grpc.ServiceRegistrar, srv RecipeAccessServiceServer) {
	// If the following call pancis, it indicates UnimplementedRecipeAccessServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecipeAccessService_ServiceDesc, srv)
}

func _RecipeAccessService_CreateAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeAccessServiceServer).CreateAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipeAccessService_CreateAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeAccessServiceServer).CreateAccess(ctx, req.(*CreateAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipeAccessService_DeleteAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeAccessServiceServer).DeleteAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipeAccessService_DeleteAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeAccessServiceServer).DeleteAccess(ctx, req.(*DeleteAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipeAccessService_GetAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeAccessServiceServer).GetAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipeAccessService_GetAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeAccessServiceServer).GetAccess(ctx, req.(*GetAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipeAccessService_ListAccesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeAccessServiceServer).ListAccesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipeAccessService_ListAccesses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeAccessServiceServer).ListAccesses(ctx, req.(*ListAccessesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipeAccessService_UpdateAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeAccessServiceServer).UpdateAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipeAccessService_UpdateAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeAccessServiceServer).UpdateAccess(ctx, req.(*UpdateAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipeAccessService_AcceptRecipeAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptRecipeAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeAccessServiceServer).AcceptRecipeAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipeAccessService_AcceptRecipeAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeAccessServiceServer).AcceptRecipeAccess(ctx, req.(*AcceptRecipeAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecipeAccessService_ServiceDesc is the grpc.ServiceDesc for RecipeAccessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecipeAccessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.meals.recipe.v1alpha1.RecipeAccessService",
	HandlerType: (*RecipeAccessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccess",
			Handler:    _RecipeAccessService_CreateAccess_Handler,
		},
		{
			MethodName: "DeleteAccess",
			Handler:    _RecipeAccessService_DeleteAccess_Handler,
		},
		{
			MethodName: "GetAccess",
			Handler:    _RecipeAccessService_GetAccess_Handler,
		},
		{
			MethodName: "ListAccesses",
			Handler:    _RecipeAccessService_ListAccesses_Handler,
		},
		{
			MethodName: "UpdateAccess",
			Handler:    _RecipeAccessService_UpdateAccess_Handler,
		},
		{
			MethodName: "AcceptRecipeAccess",
			Handler:    _RecipeAccessService_AcceptRecipeAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/meals/recipe/v1alpha1/recipe_access.proto",
}
