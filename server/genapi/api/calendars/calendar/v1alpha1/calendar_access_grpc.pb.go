// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/calendars/calendar/v1alpha1/calendar_access.proto

package calendarv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CalendarAccessService_CreateAccess_FullMethodName = "/api.calendars.calendar.v1alpha1.CalendarAccessService/CreateAccess"
	CalendarAccessService_DeleteAccess_FullMethodName = "/api.calendars.calendar.v1alpha1.CalendarAccessService/DeleteAccess"
	CalendarAccessService_GetAccess_FullMethodName    = "/api.calendars.calendar.v1alpha1.CalendarAccessService/GetAccess"
	CalendarAccessService_ListAccesses_FullMethodName = "/api.calendars.calendar.v1alpha1.CalendarAccessService/ListAccesses"
	CalendarAccessService_UpdateAccess_FullMethodName = "/api.calendars.calendar.v1alpha1.CalendarAccessService/UpdateAccess"
	CalendarAccessService_AcceptAccess_FullMethodName = "/api.calendars.calendar.v1alpha1.CalendarAccessService/AcceptAccess"
)

// CalendarAccessServiceClient is the client API for CalendarAccessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The calendar recipient list service
type CalendarAccessServiceClient interface {
	// Create an access to a calendar
	CreateAccess(ctx context.Context, in *CreateAccessRequest, opts ...grpc.CallOption) (*Access, error)
	// Delete an access to a calendar
	DeleteAccess(ctx context.Context, in *DeleteAccessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get an access to a calendar
	GetAccess(ctx context.Context, in *GetAccessRequest, opts ...grpc.CallOption) (*Access, error)
	// List accesses to a calendar
	ListAccesses(ctx context.Context, in *ListAccessesRequest, opts ...grpc.CallOption) (*ListAccessesResponse, error)
	// Update an access to a calendar
	UpdateAccess(ctx context.Context, in *UpdateAccessRequest, opts ...grpc.CallOption) (*Access, error)
	// Accept a calendar access
	AcceptAccess(ctx context.Context, in *AcceptAccessRequest, opts ...grpc.CallOption) (*Access, error)
}

type calendarAccessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalendarAccessServiceClient(cc grpc.ClientConnInterface) CalendarAccessServiceClient {
	return &calendarAccessServiceClient{cc}
}

func (c *calendarAccessServiceClient) CreateAccess(ctx context.Context, in *CreateAccessRequest, opts ...grpc.CallOption) (*Access, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Access)
	err := c.cc.Invoke(ctx, CalendarAccessService_CreateAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarAccessServiceClient) DeleteAccess(ctx context.Context, in *DeleteAccessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CalendarAccessService_DeleteAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarAccessServiceClient) GetAccess(ctx context.Context, in *GetAccessRequest, opts ...grpc.CallOption) (*Access, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Access)
	err := c.cc.Invoke(ctx, CalendarAccessService_GetAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarAccessServiceClient) ListAccesses(ctx context.Context, in *ListAccessesRequest, opts ...grpc.CallOption) (*ListAccessesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccessesResponse)
	err := c.cc.Invoke(ctx, CalendarAccessService_ListAccesses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarAccessServiceClient) UpdateAccess(ctx context.Context, in *UpdateAccessRequest, opts ...grpc.CallOption) (*Access, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Access)
	err := c.cc.Invoke(ctx, CalendarAccessService_UpdateAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarAccessServiceClient) AcceptAccess(ctx context.Context, in *AcceptAccessRequest, opts ...grpc.CallOption) (*Access, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Access)
	err := c.cc.Invoke(ctx, CalendarAccessService_AcceptAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalendarAccessServiceServer is the server API for CalendarAccessService service.
// All implementations must embed UnimplementedCalendarAccessServiceServer
// for forward compatibility.
//
// The calendar recipient list service
type CalendarAccessServiceServer interface {
	// Create an access to a calendar
	CreateAccess(context.Context, *CreateAccessRequest) (*Access, error)
	// Delete an access to a calendar
	DeleteAccess(context.Context, *DeleteAccessRequest) (*emptypb.Empty, error)
	// Get an access to a calendar
	GetAccess(context.Context, *GetAccessRequest) (*Access, error)
	// List accesses to a calendar
	ListAccesses(context.Context, *ListAccessesRequest) (*ListAccessesResponse, error)
	// Update an access to a calendar
	UpdateAccess(context.Context, *UpdateAccessRequest) (*Access, error)
	// Accept a calendar access
	AcceptAccess(context.Context, *AcceptAccessRequest) (*Access, error)
	mustEmbedUnimplementedCalendarAccessServiceServer()
}

// UnimplementedCalendarAccessServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCalendarAccessServiceServer struct{}

func (UnimplementedCalendarAccessServiceServer) CreateAccess(context.Context, *CreateAccessRequest) (*Access, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccess not implemented")
}
func (UnimplementedCalendarAccessServiceServer) DeleteAccess(context.Context, *DeleteAccessRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccess not implemented")
}
func (UnimplementedCalendarAccessServiceServer) GetAccess(context.Context, *GetAccessRequest) (*Access, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccess not implemented")
}
func (UnimplementedCalendarAccessServiceServer) ListAccesses(context.Context, *ListAccessesRequest) (*ListAccessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccesses not implemented")
}
func (UnimplementedCalendarAccessServiceServer) UpdateAccess(context.Context, *UpdateAccessRequest) (*Access, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccess not implemented")
}
func (UnimplementedCalendarAccessServiceServer) AcceptAccess(context.Context, *AcceptAccessRequest) (*Access, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptAccess not implemented")
}
func (UnimplementedCalendarAccessServiceServer) mustEmbedUnimplementedCalendarAccessServiceServer() {}
func (UnimplementedCalendarAccessServiceServer) testEmbeddedByValue()                               {}

// UnsafeCalendarAccessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalendarAccessServiceServer will
// result in compilation errors.
type UnsafeCalendarAccessServiceServer interface {
	mustEmbedUnimplementedCalendarAccessServiceServer()
}

func RegisterCalendarAccessServiceServer(s grpc.ServiceRegistrar, srv CalendarAccessServiceServer) {
	// If the following call pancis, it indicates UnimplementedCalendarAccessServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CalendarAccessService_ServiceDesc, srv)
}

func _CalendarAccessService_CreateAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarAccessServiceServer).CreateAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalendarAccessService_CreateAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarAccessServiceServer).CreateAccess(ctx, req.(*CreateAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarAccessService_DeleteAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarAccessServiceServer).DeleteAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalendarAccessService_DeleteAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarAccessServiceServer).DeleteAccess(ctx, req.(*DeleteAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarAccessService_GetAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarAccessServiceServer).GetAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalendarAccessService_GetAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarAccessServiceServer).GetAccess(ctx, req.(*GetAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarAccessService_ListAccesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarAccessServiceServer).ListAccesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalendarAccessService_ListAccesses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarAccessServiceServer).ListAccesses(ctx, req.(*ListAccessesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarAccessService_UpdateAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarAccessServiceServer).UpdateAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalendarAccessService_UpdateAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarAccessServiceServer).UpdateAccess(ctx, req.(*UpdateAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarAccessService_AcceptAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarAccessServiceServer).AcceptAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalendarAccessService_AcceptAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarAccessServiceServer).AcceptAccess(ctx, req.(*AcceptAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CalendarAccessService_ServiceDesc is the grpc.ServiceDesc for CalendarAccessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalendarAccessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.calendars.calendar.v1alpha1.CalendarAccessService",
	HandlerType: (*CalendarAccessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccess",
			Handler:    _CalendarAccessService_CreateAccess_Handler,
		},
		{
			MethodName: "DeleteAccess",
			Handler:    _CalendarAccessService_DeleteAccess_Handler,
		},
		{
			MethodName: "GetAccess",
			Handler:    _CalendarAccessService_GetAccess_Handler,
		},
		{
			MethodName: "ListAccesses",
			Handler:    _CalendarAccessService_ListAccesses_Handler,
		},
		{
			MethodName: "UpdateAccess",
			Handler:    _CalendarAccessService_UpdateAccess_Handler,
		},
		{
			MethodName: "AcceptAccess",
			Handler:    _CalendarAccessService_AcceptAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/calendars/calendar/v1alpha1/calendar_access.proto",
}
