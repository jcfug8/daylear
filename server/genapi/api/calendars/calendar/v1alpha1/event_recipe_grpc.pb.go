// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/calendars/calendar/v1alpha1/event_recipe.proto

package calendarv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	EventRecipeService_CreateEventRecipe_FullMethodName = "/api.calendars.calendar.v1alpha1.EventRecipeService/CreateEventRecipe"
	EventRecipeService_GetEventRecipe_FullMethodName    = "/api.calendars.calendar.v1alpha1.EventRecipeService/GetEventRecipe"
	EventRecipeService_DeleteEventRecipe_FullMethodName = "/api.calendars.calendar.v1alpha1.EventRecipeService/DeleteEventRecipe"
	EventRecipeService_ListEventRecipes_FullMethodName  = "/api.calendars.calendar.v1alpha1.EventRecipeService/ListEventRecipes"
)

// EventRecipeServiceClient is the client API for EventRecipeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// the event recipe service
type EventRecipeServiceClient interface {
	// create an event recipe
	CreateEventRecipe(ctx context.Context, in *CreateEventRecipeRequest, opts ...grpc.CallOption) (*EventRecipe, error)
	// get an event recipe
	GetEventRecipe(ctx context.Context, in *GetEventRecipeRequest, opts ...grpc.CallOption) (*EventRecipe, error)
	// delete an event recipe
	DeleteEventRecipe(ctx context.Context, in *DeleteEventRecipeRequest, opts ...grpc.CallOption) (*EventRecipe, error)
	// list event recipes
	ListEventRecipes(ctx context.Context, in *ListEventRecipesRequest, opts ...grpc.CallOption) (*ListEventRecipesResponse, error)
}

type eventRecipeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventRecipeServiceClient(cc grpc.ClientConnInterface) EventRecipeServiceClient {
	return &eventRecipeServiceClient{cc}
}

func (c *eventRecipeServiceClient) CreateEventRecipe(ctx context.Context, in *CreateEventRecipeRequest, opts ...grpc.CallOption) (*EventRecipe, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventRecipe)
	err := c.cc.Invoke(ctx, EventRecipeService_CreateEventRecipe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRecipeServiceClient) GetEventRecipe(ctx context.Context, in *GetEventRecipeRequest, opts ...grpc.CallOption) (*EventRecipe, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventRecipe)
	err := c.cc.Invoke(ctx, EventRecipeService_GetEventRecipe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRecipeServiceClient) DeleteEventRecipe(ctx context.Context, in *DeleteEventRecipeRequest, opts ...grpc.CallOption) (*EventRecipe, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventRecipe)
	err := c.cc.Invoke(ctx, EventRecipeService_DeleteEventRecipe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRecipeServiceClient) ListEventRecipes(ctx context.Context, in *ListEventRecipesRequest, opts ...grpc.CallOption) (*ListEventRecipesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEventRecipesResponse)
	err := c.cc.Invoke(ctx, EventRecipeService_ListEventRecipes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventRecipeServiceServer is the server API for EventRecipeService service.
// All implementations must embed UnimplementedEventRecipeServiceServer
// for forward compatibility.
//
// the event recipe service
type EventRecipeServiceServer interface {
	// create an event recipe
	CreateEventRecipe(context.Context, *CreateEventRecipeRequest) (*EventRecipe, error)
	// get an event recipe
	GetEventRecipe(context.Context, *GetEventRecipeRequest) (*EventRecipe, error)
	// delete an event recipe
	DeleteEventRecipe(context.Context, *DeleteEventRecipeRequest) (*EventRecipe, error)
	// list event recipes
	ListEventRecipes(context.Context, *ListEventRecipesRequest) (*ListEventRecipesResponse, error)
	mustEmbedUnimplementedEventRecipeServiceServer()
}

// UnimplementedEventRecipeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventRecipeServiceServer struct{}

func (UnimplementedEventRecipeServiceServer) CreateEventRecipe(context.Context, *CreateEventRecipeRequest) (*EventRecipe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEventRecipe not implemented")
}
func (UnimplementedEventRecipeServiceServer) GetEventRecipe(context.Context, *GetEventRecipeRequest) (*EventRecipe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventRecipe not implemented")
}
func (UnimplementedEventRecipeServiceServer) DeleteEventRecipe(context.Context, *DeleteEventRecipeRequest) (*EventRecipe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEventRecipe not implemented")
}
func (UnimplementedEventRecipeServiceServer) ListEventRecipes(context.Context, *ListEventRecipesRequest) (*ListEventRecipesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventRecipes not implemented")
}
func (UnimplementedEventRecipeServiceServer) mustEmbedUnimplementedEventRecipeServiceServer() {}
func (UnimplementedEventRecipeServiceServer) testEmbeddedByValue()                            {}

// UnsafeEventRecipeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventRecipeServiceServer will
// result in compilation errors.
type UnsafeEventRecipeServiceServer interface {
	mustEmbedUnimplementedEventRecipeServiceServer()
}

func RegisterEventRecipeServiceServer(s grpc.ServiceRegistrar, srv EventRecipeServiceServer) {
	// If the following call pancis, it indicates UnimplementedEventRecipeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventRecipeService_ServiceDesc, srv)
}

func _EventRecipeService_CreateEventRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRecipeServiceServer).CreateEventRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventRecipeService_CreateEventRecipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRecipeServiceServer).CreateEventRecipe(ctx, req.(*CreateEventRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRecipeService_GetEventRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRecipeServiceServer).GetEventRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventRecipeService_GetEventRecipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRecipeServiceServer).GetEventRecipe(ctx, req.(*GetEventRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRecipeService_DeleteEventRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRecipeServiceServer).DeleteEventRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventRecipeService_DeleteEventRecipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRecipeServiceServer).DeleteEventRecipe(ctx, req.(*DeleteEventRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRecipeService_ListEventRecipes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventRecipesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRecipeServiceServer).ListEventRecipes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventRecipeService_ListEventRecipes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRecipeServiceServer).ListEventRecipes(ctx, req.(*ListEventRecipesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventRecipeService_ServiceDesc is the grpc.ServiceDesc for EventRecipeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventRecipeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.calendars.calendar.v1alpha1.EventRecipeService",
	HandlerType: (*EventRecipeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEventRecipe",
			Handler:    _EventRecipeService_CreateEventRecipe_Handler,
		},
		{
			MethodName: "GetEventRecipe",
			Handler:    _EventRecipeService_GetEventRecipe_Handler,
		},
		{
			MethodName: "DeleteEventRecipe",
			Handler:    _EventRecipeService_DeleteEventRecipe_Handler,
		},
		{
			MethodName: "ListEventRecipes",
			Handler:    _EventRecipeService_ListEventRecipes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/calendars/calendar/v1alpha1/event_recipe.proto",
}
