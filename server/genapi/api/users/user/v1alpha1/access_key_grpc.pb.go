// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/users/user/v1alpha1/access_key.proto

package userv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AccessKeyService_CreateAccessKey_FullMethodName = "/api.users.user.v1alpha1.AccessKeyService/CreateAccessKey"
	AccessKeyService_DeleteAccessKey_FullMethodName = "/api.users.user.v1alpha1.AccessKeyService/DeleteAccessKey"
	AccessKeyService_GetAccessKey_FullMethodName    = "/api.users.user.v1alpha1.AccessKeyService/GetAccessKey"
	AccessKeyService_ListAccessKeys_FullMethodName  = "/api.users.user.v1alpha1.AccessKeyService/ListAccessKeys"
	AccessKeyService_UpdateAccessKey_FullMethodName = "/api.users.user.v1alpha1.AccessKeyService/UpdateAccessKey"
)

// AccessKeyServiceClient is the client API for AccessKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The user recipient list service
type AccessKeyServiceClient interface {
	// Create an access to a user
	CreateAccessKey(ctx context.Context, in *CreateAccessKeyRequest, opts ...grpc.CallOption) (*AccessKey, error)
	// Delete an access to a user
	DeleteAccessKey(ctx context.Context, in *DeleteAccessKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get an access to a user
	GetAccessKey(ctx context.Context, in *GetAccessKeyRequest, opts ...grpc.CallOption) (*AccessKey, error)
	// List accesses to a user
	ListAccessKeys(ctx context.Context, in *ListAccessKeysRequest, opts ...grpc.CallOption) (*ListAccessKeysResponse, error)
	// Update an access key
	UpdateAccessKey(ctx context.Context, in *UpdateAccessKeyRequest, opts ...grpc.CallOption) (*AccessKey, error)
}

type accessKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessKeyServiceClient(cc grpc.ClientConnInterface) AccessKeyServiceClient {
	return &accessKeyServiceClient{cc}
}

func (c *accessKeyServiceClient) CreateAccessKey(ctx context.Context, in *CreateAccessKeyRequest, opts ...grpc.CallOption) (*AccessKey, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessKey)
	err := c.cc.Invoke(ctx, AccessKeyService_CreateAccessKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) DeleteAccessKey(ctx context.Context, in *DeleteAccessKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessKeyService_DeleteAccessKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) GetAccessKey(ctx context.Context, in *GetAccessKeyRequest, opts ...grpc.CallOption) (*AccessKey, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessKey)
	err := c.cc.Invoke(ctx, AccessKeyService_GetAccessKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) ListAccessKeys(ctx context.Context, in *ListAccessKeysRequest, opts ...grpc.CallOption) (*ListAccessKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccessKeysResponse)
	err := c.cc.Invoke(ctx, AccessKeyService_ListAccessKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) UpdateAccessKey(ctx context.Context, in *UpdateAccessKeyRequest, opts ...grpc.CallOption) (*AccessKey, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessKey)
	err := c.cc.Invoke(ctx, AccessKeyService_UpdateAccessKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessKeyServiceServer is the server API for AccessKeyService service.
// All implementations must embed UnimplementedAccessKeyServiceServer
// for forward compatibility.
//
// The user recipient list service
type AccessKeyServiceServer interface {
	// Create an access to a user
	CreateAccessKey(context.Context, *CreateAccessKeyRequest) (*AccessKey, error)
	// Delete an access to a user
	DeleteAccessKey(context.Context, *DeleteAccessKeyRequest) (*emptypb.Empty, error)
	// Get an access to a user
	GetAccessKey(context.Context, *GetAccessKeyRequest) (*AccessKey, error)
	// List accesses to a user
	ListAccessKeys(context.Context, *ListAccessKeysRequest) (*ListAccessKeysResponse, error)
	// Update an access key
	UpdateAccessKey(context.Context, *UpdateAccessKeyRequest) (*AccessKey, error)
	mustEmbedUnimplementedAccessKeyServiceServer()
}

// UnimplementedAccessKeyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccessKeyServiceServer struct{}

func (UnimplementedAccessKeyServiceServer) CreateAccessKey(context.Context, *CreateAccessKeyRequest) (*AccessKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessKey not implemented")
}
func (UnimplementedAccessKeyServiceServer) DeleteAccessKey(context.Context, *DeleteAccessKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccessKey not implemented")
}
func (UnimplementedAccessKeyServiceServer) GetAccessKey(context.Context, *GetAccessKeyRequest) (*AccessKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessKey not implemented")
}
func (UnimplementedAccessKeyServiceServer) ListAccessKeys(context.Context, *ListAccessKeysRequest) (*ListAccessKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessKeys not implemented")
}
func (UnimplementedAccessKeyServiceServer) UpdateAccessKey(context.Context, *UpdateAccessKeyRequest) (*AccessKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccessKey not implemented")
}
func (UnimplementedAccessKeyServiceServer) mustEmbedUnimplementedAccessKeyServiceServer() {}
func (UnimplementedAccessKeyServiceServer) testEmbeddedByValue()                          {}

// UnsafeAccessKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessKeyServiceServer will
// result in compilation errors.
type UnsafeAccessKeyServiceServer interface {
	mustEmbedUnimplementedAccessKeyServiceServer()
}

func RegisterAccessKeyServiceServer(s grpc.ServiceRegistrar, srv AccessKeyServiceServer) {
	// If the following call pancis, it indicates UnimplementedAccessKeyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccessKeyService_ServiceDesc, srv)
}

func _AccessKeyService_CreateAccessKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).CreateAccessKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessKeyService_CreateAccessKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).CreateAccessKey(ctx, req.(*CreateAccessKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessKeyService_DeleteAccessKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccessKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).DeleteAccessKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessKeyService_DeleteAccessKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).DeleteAccessKey(ctx, req.(*DeleteAccessKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessKeyService_GetAccessKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).GetAccessKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessKeyService_GetAccessKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).GetAccessKey(ctx, req.(*GetAccessKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessKeyService_ListAccessKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).ListAccessKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessKeyService_ListAccessKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).ListAccessKeys(ctx, req.(*ListAccessKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessKeyService_UpdateAccessKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccessKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).UpdateAccessKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessKeyService_UpdateAccessKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).UpdateAccessKey(ctx, req.(*UpdateAccessKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessKeyService_ServiceDesc is the grpc.ServiceDesc for AccessKeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessKeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.users.user.v1alpha1.AccessKeyService",
	HandlerType: (*AccessKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccessKey",
			Handler:    _AccessKeyService_CreateAccessKey_Handler,
		},
		{
			MethodName: "DeleteAccessKey",
			Handler:    _AccessKeyService_DeleteAccessKey_Handler,
		},
		{
			MethodName: "GetAccessKey",
			Handler:    _AccessKeyService_GetAccessKey_Handler,
		},
		{
			MethodName: "ListAccessKeys",
			Handler:    _AccessKeyService_ListAccessKeys_Handler,
		},
		{
			MethodName: "UpdateAccessKey",
			Handler:    _AccessKeyService_UpdateAccessKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/users/user/v1alpha1/access_key.proto",
}
