// (-- api-linter: core::0191::java-outer-classname=disabled
//     aip.dev/not-precedent: I don't care about java. --)
// (-- api-linter: core::0191::java-multiple-files=disabled
//     aip.dev/not-precedent: I don't care about java. --)
// (-- api-linter: core::0191::java-package=disabled
//     aip.dev/not-precedent: I don't care about java. --)

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/users/user/v1alpha1/public_user.proto

package userv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PublicUserService_ListPublicUsers_FullMethodName = "/api.users.user.v1alpha1.PublicUserService/ListPublicUsers"
	PublicUserService_GetPublicUser_FullMethodName   = "/api.users.user.v1alpha1.PublicUserService/GetPublicUser"
)

// PublicUserServiceClient is the client API for PublicUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// the user service
type PublicUserServiceClient interface {
	// list a public user
	ListPublicUsers(ctx context.Context, in *ListPublicUsersRequest, opts ...grpc.CallOption) (*ListPublicUsersResponse, error)
	// get a public user
	GetPublicUser(ctx context.Context, in *GetPublicUserRequest, opts ...grpc.CallOption) (*PublicUser, error)
}

type publicUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicUserServiceClient(cc grpc.ClientConnInterface) PublicUserServiceClient {
	return &publicUserServiceClient{cc}
}

func (c *publicUserServiceClient) ListPublicUsers(ctx context.Context, in *ListPublicUsersRequest, opts ...grpc.CallOption) (*ListPublicUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPublicUsersResponse)
	err := c.cc.Invoke(ctx, PublicUserService_ListPublicUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicUserServiceClient) GetPublicUser(ctx context.Context, in *GetPublicUserRequest, opts ...grpc.CallOption) (*PublicUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublicUser)
	err := c.cc.Invoke(ctx, PublicUserService_GetPublicUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicUserServiceServer is the server API for PublicUserService service.
// All implementations must embed UnimplementedPublicUserServiceServer
// for forward compatibility.
//
// the user service
type PublicUserServiceServer interface {
	// list a public user
	ListPublicUsers(context.Context, *ListPublicUsersRequest) (*ListPublicUsersResponse, error)
	// get a public user
	GetPublicUser(context.Context, *GetPublicUserRequest) (*PublicUser, error)
	mustEmbedUnimplementedPublicUserServiceServer()
}

// UnimplementedPublicUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPublicUserServiceServer struct{}

func (UnimplementedPublicUserServiceServer) ListPublicUsers(context.Context, *ListPublicUsersRequest) (*ListPublicUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublicUsers not implemented")
}
func (UnimplementedPublicUserServiceServer) GetPublicUser(context.Context, *GetPublicUserRequest) (*PublicUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicUser not implemented")
}
func (UnimplementedPublicUserServiceServer) mustEmbedUnimplementedPublicUserServiceServer() {}
func (UnimplementedPublicUserServiceServer) testEmbeddedByValue()                           {}

// UnsafePublicUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicUserServiceServer will
// result in compilation errors.
type UnsafePublicUserServiceServer interface {
	mustEmbedUnimplementedPublicUserServiceServer()
}

func RegisterPublicUserServiceServer(s grpc.ServiceRegistrar, srv PublicUserServiceServer) {
	// If the following call pancis, it indicates UnimplementedPublicUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PublicUserService_ServiceDesc, srv)
}

func _PublicUserService_ListPublicUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPublicUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicUserServiceServer).ListPublicUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicUserService_ListPublicUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicUserServiceServer).ListPublicUsers(ctx, req.(*ListPublicUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicUserService_GetPublicUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicUserServiceServer).GetPublicUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicUserService_GetPublicUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicUserServiceServer).GetPublicUser(ctx, req.(*GetPublicUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicUserService_ServiceDesc is the grpc.ServiceDesc for PublicUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.users.user.v1alpha1.PublicUserService",
	HandlerType: (*PublicUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPublicUsers",
			Handler:    _PublicUserService_ListPublicUsers_Handler,
		},
		{
			MethodName: "GetPublicUser",
			Handler:    _PublicUserService_GetPublicUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/users/user/v1alpha1/public_user.proto",
}
