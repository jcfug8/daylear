// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/lists/list/v1alpha1/list_item.proto

package listv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ListItemService_CreateListItem_FullMethodName = "/api.lists.list.v1alpha1.ListItemService/CreateListItem"
	ListItemService_ListListItems_FullMethodName  = "/api.lists.list.v1alpha1.ListItemService/ListListItems"
	ListItemService_UpdateListItem_FullMethodName = "/api.lists.list.v1alpha1.ListItemService/UpdateListItem"
	ListItemService_DeleteListItem_FullMethodName = "/api.lists.list.v1alpha1.ListItemService/DeleteListItem"
	ListItemService_GetListItem_FullMethodName    = "/api.lists.list.v1alpha1.ListItemService/GetListItem"
)

// ListItemServiceClient is the client API for ListItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// the listItem service
type ListItemServiceClient interface {
	// create a listItem
	CreateListItem(ctx context.Context, in *CreateListItemRequest, opts ...grpc.CallOption) (*ListItem, error)
	// listItem listItems
	ListListItems(ctx context.Context, in *ListListItemsRequest, opts ...grpc.CallOption) (*ListListItemsResponse, error)
	// update a listItem
	UpdateListItem(ctx context.Context, in *UpdateListItemRequest, opts ...grpc.CallOption) (*ListItem, error)
	// delete` a listItem
	DeleteListItem(ctx context.Context, in *DeleteListItemRequest, opts ...grpc.CallOption) (*ListItem, error)
	// get a listItem
	GetListItem(ctx context.Context, in *GetListItemRequest, opts ...grpc.CallOption) (*ListItem, error)
}

type listItemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewListItemServiceClient(cc grpc.ClientConnInterface) ListItemServiceClient {
	return &listItemServiceClient{cc}
}

func (c *listItemServiceClient) CreateListItem(ctx context.Context, in *CreateListItemRequest, opts ...grpc.CallOption) (*ListItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListItem)
	err := c.cc.Invoke(ctx, ListItemService_CreateListItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listItemServiceClient) ListListItems(ctx context.Context, in *ListListItemsRequest, opts ...grpc.CallOption) (*ListListItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListListItemsResponse)
	err := c.cc.Invoke(ctx, ListItemService_ListListItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listItemServiceClient) UpdateListItem(ctx context.Context, in *UpdateListItemRequest, opts ...grpc.CallOption) (*ListItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListItem)
	err := c.cc.Invoke(ctx, ListItemService_UpdateListItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listItemServiceClient) DeleteListItem(ctx context.Context, in *DeleteListItemRequest, opts ...grpc.CallOption) (*ListItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListItem)
	err := c.cc.Invoke(ctx, ListItemService_DeleteListItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listItemServiceClient) GetListItem(ctx context.Context, in *GetListItemRequest, opts ...grpc.CallOption) (*ListItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListItem)
	err := c.cc.Invoke(ctx, ListItemService_GetListItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListItemServiceServer is the server API for ListItemService service.
// All implementations must embed UnimplementedListItemServiceServer
// for forward compatibility.
//
// the listItem service
type ListItemServiceServer interface {
	// create a listItem
	CreateListItem(context.Context, *CreateListItemRequest) (*ListItem, error)
	// listItem listItems
	ListListItems(context.Context, *ListListItemsRequest) (*ListListItemsResponse, error)
	// update a listItem
	UpdateListItem(context.Context, *UpdateListItemRequest) (*ListItem, error)
	// delete` a listItem
	DeleteListItem(context.Context, *DeleteListItemRequest) (*ListItem, error)
	// get a listItem
	GetListItem(context.Context, *GetListItemRequest) (*ListItem, error)
	mustEmbedUnimplementedListItemServiceServer()
}

// UnimplementedListItemServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedListItemServiceServer struct{}

func (UnimplementedListItemServiceServer) CreateListItem(context.Context, *CreateListItemRequest) (*ListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateListItem not implemented")
}
func (UnimplementedListItemServiceServer) ListListItems(context.Context, *ListListItemsRequest) (*ListListItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListListItems not implemented")
}
func (UnimplementedListItemServiceServer) UpdateListItem(context.Context, *UpdateListItemRequest) (*ListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateListItem not implemented")
}
func (UnimplementedListItemServiceServer) DeleteListItem(context.Context, *DeleteListItemRequest) (*ListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteListItem not implemented")
}
func (UnimplementedListItemServiceServer) GetListItem(context.Context, *GetListItemRequest) (*ListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListItem not implemented")
}
func (UnimplementedListItemServiceServer) mustEmbedUnimplementedListItemServiceServer() {}
func (UnimplementedListItemServiceServer) testEmbeddedByValue()                         {}

// UnsafeListItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListItemServiceServer will
// result in compilation errors.
type UnsafeListItemServiceServer interface {
	mustEmbedUnimplementedListItemServiceServer()
}

func RegisterListItemServiceServer(s grpc.ServiceRegistrar, srv ListItemServiceServer) {
	// If the following call pancis, it indicates UnimplementedListItemServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ListItemService_ServiceDesc, srv)
}

func _ListItemService_CreateListItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateListItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListItemServiceServer).CreateListItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListItemService_CreateListItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListItemServiceServer).CreateListItem(ctx, req.(*CreateListItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListItemService_ListListItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListListItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListItemServiceServer).ListListItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListItemService_ListListItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListItemServiceServer).ListListItems(ctx, req.(*ListListItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListItemService_UpdateListItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateListItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListItemServiceServer).UpdateListItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListItemService_UpdateListItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListItemServiceServer).UpdateListItem(ctx, req.(*UpdateListItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListItemService_DeleteListItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteListItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListItemServiceServer).DeleteListItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListItemService_DeleteListItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListItemServiceServer).DeleteListItem(ctx, req.(*DeleteListItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListItemService_GetListItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListItemServiceServer).GetListItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListItemService_GetListItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListItemServiceServer).GetListItem(ctx, req.(*GetListItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ListItemService_ServiceDesc is the grpc.ServiceDesc for ListItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.lists.list.v1alpha1.ListItemService",
	HandlerType: (*ListItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateListItem",
			Handler:    _ListItemService_CreateListItem_Handler,
		},
		{
			MethodName: "ListListItems",
			Handler:    _ListItemService_ListListItems_Handler,
		},
		{
			MethodName: "UpdateListItem",
			Handler:    _ListItemService_UpdateListItem_Handler,
		},
		{
			MethodName: "DeleteListItem",
			Handler:    _ListItemService_DeleteListItem_Handler,
		},
		{
			MethodName: "GetListItem",
			Handler:    _ListItemService_GetListItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/lists/list/v1alpha1/list_item.proto",
}
