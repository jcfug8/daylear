// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/lists/list/v1alpha1/list.proto

package listv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ListService_CreateList_FullMethodName     = "/api.lists.list.v1alpha1.ListService/CreateList"
	ListService_ListLists_FullMethodName      = "/api.lists.list.v1alpha1.ListService/ListLists"
	ListService_UpdateList_FullMethodName     = "/api.lists.list.v1alpha1.ListService/UpdateList"
	ListService_DeleteList_FullMethodName     = "/api.lists.list.v1alpha1.ListService/DeleteList"
	ListService_GetList_FullMethodName        = "/api.lists.list.v1alpha1.ListService/GetList"
	ListService_FavoriteList_FullMethodName   = "/api.lists.list.v1alpha1.ListService/FavoriteList"
	ListService_UnfavoriteList_FullMethodName = "/api.lists.list.v1alpha1.ListService/UnfavoriteList"
)

// ListServiceClient is the client API for ListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// the list service
type ListServiceClient interface {
	// create a list
	CreateList(ctx context.Context, in *CreateListRequest, opts ...grpc.CallOption) (*List, error)
	// list lists
	ListLists(ctx context.Context, in *ListListsRequest, opts ...grpc.CallOption) (*ListListsResponse, error)
	// update a list
	UpdateList(ctx context.Context, in *UpdateListRequest, opts ...grpc.CallOption) (*List, error)
	// delete` a list
	DeleteList(ctx context.Context, in *DeleteListRequest, opts ...grpc.CallOption) (*List, error)
	// get a list
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*List, error)
	// favorite a list
	FavoriteList(ctx context.Context, in *FavoriteListRequest, opts ...grpc.CallOption) (*FavoriteListResponse, error)
	// unfavorite a list
	UnfavoriteList(ctx context.Context, in *UnfavoriteListRequest, opts ...grpc.CallOption) (*UnfavoriteListResponse, error)
}

type listServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewListServiceClient(cc grpc.ClientConnInterface) ListServiceClient {
	return &listServiceClient{cc}
}

func (c *listServiceClient) CreateList(ctx context.Context, in *CreateListRequest, opts ...grpc.CallOption) (*List, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(List)
	err := c.cc.Invoke(ctx, ListService_CreateList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) ListLists(ctx context.Context, in *ListListsRequest, opts ...grpc.CallOption) (*ListListsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListListsResponse)
	err := c.cc.Invoke(ctx, ListService_ListLists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) UpdateList(ctx context.Context, in *UpdateListRequest, opts ...grpc.CallOption) (*List, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(List)
	err := c.cc.Invoke(ctx, ListService_UpdateList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) DeleteList(ctx context.Context, in *DeleteListRequest, opts ...grpc.CallOption) (*List, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(List)
	err := c.cc.Invoke(ctx, ListService_DeleteList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*List, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(List)
	err := c.cc.Invoke(ctx, ListService_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) FavoriteList(ctx context.Context, in *FavoriteListRequest, opts ...grpc.CallOption) (*FavoriteListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FavoriteListResponse)
	err := c.cc.Invoke(ctx, ListService_FavoriteList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) UnfavoriteList(ctx context.Context, in *UnfavoriteListRequest, opts ...grpc.CallOption) (*UnfavoriteListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnfavoriteListResponse)
	err := c.cc.Invoke(ctx, ListService_UnfavoriteList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListServiceServer is the server API for ListService service.
// All implementations must embed UnimplementedListServiceServer
// for forward compatibility.
//
// the list service
type ListServiceServer interface {
	// create a list
	CreateList(context.Context, *CreateListRequest) (*List, error)
	// list lists
	ListLists(context.Context, *ListListsRequest) (*ListListsResponse, error)
	// update a list
	UpdateList(context.Context, *UpdateListRequest) (*List, error)
	// delete` a list
	DeleteList(context.Context, *DeleteListRequest) (*List, error)
	// get a list
	GetList(context.Context, *GetListRequest) (*List, error)
	// favorite a list
	FavoriteList(context.Context, *FavoriteListRequest) (*FavoriteListResponse, error)
	// unfavorite a list
	UnfavoriteList(context.Context, *UnfavoriteListRequest) (*UnfavoriteListResponse, error)
	mustEmbedUnimplementedListServiceServer()
}

// UnimplementedListServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedListServiceServer struct{}

func (UnimplementedListServiceServer) CreateList(context.Context, *CreateListRequest) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateList not implemented")
}
func (UnimplementedListServiceServer) ListLists(context.Context, *ListListsRequest) (*ListListsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLists not implemented")
}
func (UnimplementedListServiceServer) UpdateList(context.Context, *UpdateListRequest) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateList not implemented")
}
func (UnimplementedListServiceServer) DeleteList(context.Context, *DeleteListRequest) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteList not implemented")
}
func (UnimplementedListServiceServer) GetList(context.Context, *GetListRequest) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedListServiceServer) FavoriteList(context.Context, *FavoriteListRequest) (*FavoriteListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteList not implemented")
}
func (UnimplementedListServiceServer) UnfavoriteList(context.Context, *UnfavoriteListRequest) (*UnfavoriteListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfavoriteList not implemented")
}
func (UnimplementedListServiceServer) mustEmbedUnimplementedListServiceServer() {}
func (UnimplementedListServiceServer) testEmbeddedByValue()                     {}

// UnsafeListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListServiceServer will
// result in compilation errors.
type UnsafeListServiceServer interface {
	mustEmbedUnimplementedListServiceServer()
}

func RegisterListServiceServer(s grpc.ServiceRegistrar, srv ListServiceServer) {
	// If the following call pancis, it indicates UnimplementedListServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ListService_ServiceDesc, srv)
}

func _ListService_CreateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).CreateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_CreateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).CreateList(ctx, req.(*CreateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_ListLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListListsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).ListLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_ListLists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).ListLists(ctx, req.(*ListListsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_UpdateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).UpdateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_UpdateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).UpdateList(ctx, req.(*UpdateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_DeleteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).DeleteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_DeleteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).DeleteList(ctx, req.(*DeleteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_FavoriteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).FavoriteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_FavoriteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).FavoriteList(ctx, req.(*FavoriteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_UnfavoriteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfavoriteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).UnfavoriteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_UnfavoriteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).UnfavoriteList(ctx, req.(*UnfavoriteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ListService_ServiceDesc is the grpc.ServiceDesc for ListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.lists.list.v1alpha1.ListService",
	HandlerType: (*ListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateList",
			Handler:    _ListService_CreateList_Handler,
		},
		{
			MethodName: "ListLists",
			Handler:    _ListService_ListLists_Handler,
		},
		{
			MethodName: "UpdateList",
			Handler:    _ListService_UpdateList_Handler,
		},
		{
			MethodName: "DeleteList",
			Handler:    _ListService_DeleteList_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _ListService_GetList_Handler,
		},
		{
			MethodName: "FavoriteList",
			Handler:    _ListService_FavoriteList_Handler,
		},
		{
			MethodName: "UnfavoriteList",
			Handler:    _ListService_UnfavoriteList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/lists/list/v1alpha1/list.proto",
}
