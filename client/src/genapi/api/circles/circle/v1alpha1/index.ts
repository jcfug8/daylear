// Code generated by protoc-gen-typescript-http. DO NOT EDIT.
/* eslint-disable camelcase */
// @ts-nocheck

// the main user circle
export type Circle = {
  // the name of the circle
  //
  // Behaviors: IDENTIFIER
  name: string | undefined;
  // the title of the circle
  //
  // Behaviors: REQUIRED
  title: string | undefined;
  // the description of the circle
  //
  // Behaviors: OPTIONAL
  description: string | undefined;
  // the unique handle for the circle (like a username, must be unique, user-friendly, and can be used for sharing)
  //
  // Behaviors: OPTIONAL
  handle: string | undefined;
  // the image url for the circle
  //
  // Behaviors: OPTIONAL
  imageUri: string | undefined;
  // the visibility of the circle
  //
  // Behaviors: REQUIRED
  visibility: apitypes_VisibilityLevel | undefined;
  // circle access data
  //
  // Behaviors: OUTPUT_ONLY
  circleAccess: Circle_CircleAccess | undefined;
};

// the visibility levels
export type apitypes_VisibilityLevel =
  // the visibility is not specified
  | "VISIBILITY_LEVEL_UNSPECIFIED"
  // the visibility is public
  | "VISIBILITY_LEVEL_PUBLIC"
  // the visibility is restricted
  | "VISIBILITY_LEVEL_RESTRICTED"
  // the visibility is private
  | "VISIBILITY_LEVEL_PRIVATE"
  // the visibility is hidden
  | "VISIBILITY_LEVEL_HIDDEN";
// the circle access details
export type Circle_CircleAccess = {
  // the name of the circle access
  //
  // Behaviors: OUTPUT_ONLY
  name: string | undefined;
  // the permission of the circle
  //
  // Behaviors: OUTPUT_ONLY
  permissionLevel: apitypes_PermissionLevel | undefined;
  // the access state of the user to the circle
  //
  // Behaviors: OUTPUT_ONLY
  state: apitypes_AccessState | undefined;
  // the accept target of the access (the user or circle that is accepting the access)
  //
  // Behaviors: OUTPUT_ONLY
  acceptTarget: apitypes_AcceptTarget | undefined;
};

// the permission levels
export type apitypes_PermissionLevel =
  // the permission is not specified
  | "PERMISSION_LEVEL_UNSPECIFIED"
  // the permission is public
  | "PERMISSION_LEVEL_PUBLIC"
  // the permission is read
  | "PERMISSION_LEVEL_READ"
  // the permission is write
  | "PERMISSION_LEVEL_WRITE"
  // the permission is admin
  | "PERMISSION_LEVEL_ADMIN";
// the visibility levels
export type apitypes_AccessState =
  // This status should never get used.
  | "ACCESS_STATE_UNSPECIFIED"
  // The access is pending and can either be accepted or deleted.
  | "ACCESS_STATE_PENDING"
  // The access is accepted and can be deleted.
  | "ACCESS_STATE_ACCEPTED";
// The target of the accept action, or who can accept the access request
export type apitypes_AcceptTarget =
  // Acceptance not required or not applicable
  | "ACCEPT_TARGET_UNSPECIFIED"
  // The recipient or someone with correct access to the recipient can accept the access request
  | "ACCEPT_TARGET_RECIPIENT"
  // The resource owner or someone with correct access to the resource can accept the access request
  | "ACCEPT_TARGET_RESOURCE";
// the request to create a circle
export type CreateCircleRequest = {
  // the circle to create
  //
  // Behaviors: REQUIRED
  circle: Circle | undefined;
  // the id of the circle
  //
  // Behaviors: REQUIRED
  circleId: string | undefined;
};

// the request to list circles
export type ListCirclesRequest = {
  // the parent of the circles
  //
  // Behaviors: OPTIONAL
  parent: string | undefined;
  // the page size
  //
  // Behaviors: OPTIONAL
  pageSize: number | undefined;
  // the page token
  //
  // Behaviors: OPTIONAL
  pageToken: string | undefined;
  // used to specify the filter
  //
  // Behaviors: OPTIONAL
  filter: string | undefined;
};

// the response to list circles
export type ListCirclesResponse = {
  // the circles
  circles: Circle[] | undefined;
  // the next page token
  nextPageToken: string | undefined;
};

// the request to update a circle
export type UpdateCircleRequest = {
  // the circle to update
  //
  // Behaviors: REQUIRED
  circle: Circle | undefined;
  // the fields to update
  //
  // Behaviors: OPTIONAL
  updateMask: wellKnownFieldMask | undefined;
};

// In JSON, a field mask is encoded as a single string where paths are
// separated by a comma. Fields name in each path are converted
// to/from lower-camel naming conventions.
// As an example, consider the following message declarations:
//
//     message Profile {
//       User user = 1;
//       Photo photo = 2;
//     }
//     message User {
//       string display_name = 1;
//       string address = 2;
//     }
//
// In proto a field mask for `Profile` may look as such:
//
//     mask {
//       paths: "user.display_name"
//       paths: "photo"
//     }
//
// In JSON, the same mask is represented as below:
//
//     {
//       mask: "user.displayName,photo"
//     }
type wellKnownFieldMask = string;

// the request to delete a circle
export type DeleteCircleRequest = {
  // the name of the circle
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// the request to get a circle
export type GetCircleRequest = {
  // the name of the circle
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// the circle service
export interface CircleService {
  // create a circle
  CreateCircle(request: CreateCircleRequest): Promise<Circle>;
  // list circles
  ListCircles(request: ListCirclesRequest): Promise<ListCirclesResponse>;
  // update a circle
  UpdateCircle(request: UpdateCircleRequest): Promise<Circle>;
  // delete` a circle
  DeleteCircle(request: DeleteCircleRequest): Promise<Circle>;
  // get a circle
  GetCircle(request: GetCircleRequest): Promise<Circle>;
}

type RequestType = {
  path: string;
  method: string;
  body: string | null;
};

type RequestHandler = (request: RequestType, meta: { service: string, method: string }) => Promise<unknown>;

export function createCircleServiceClient(
  handler: RequestHandler
): CircleService {
  return {
    CreateCircle(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `circles/v1alpha1/circles`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.circle ?? {});
      const queryParams: string[] = [];
      if (request.circleId) {
        queryParams.push(`circleId=${encodeURIComponent(request.circleId.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "CircleService",
        method: "CreateCircle",
      }) as Promise<Circle>;
    },
    ListCircles(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `circles/v1alpha1/circles`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.parent) {
        queryParams.push(`parent=${encodeURIComponent(request.parent.toString())}`)
      }
      if (request.pageSize) {
        queryParams.push(`pageSize=${encodeURIComponent(request.pageSize.toString())}`)
      }
      if (request.pageToken) {
        queryParams.push(`pageToken=${encodeURIComponent(request.pageToken.toString())}`)
      }
      if (request.filter) {
        queryParams.push(`filter=${encodeURIComponent(request.filter.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "CircleService",
        method: "ListCircles",
      }) as Promise<ListCirclesResponse>;
    },
    UpdateCircle(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.circle?.name) {
        throw new Error("missing required field request.circle.name");
      }
      const path = `circles/v1alpha1/${request.circle.name}`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.circle ?? {});
      const queryParams: string[] = [];
      if (request.updateMask) {
        queryParams.push(`updateMask=${encodeURIComponent(request.updateMask.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PATCH",
        body,
      }, {
        service: "CircleService",
        method: "UpdateCircle",
      }) as Promise<Circle>;
    },
    DeleteCircle(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `circles/v1alpha1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }, {
        service: "CircleService",
        method: "DeleteCircle",
      }) as Promise<Circle>;
    },
    GetCircle(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `circles/v1alpha1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "CircleService",
        method: "GetCircle",
      }) as Promise<Circle>;
    },
  };
}
// This represents the data about a user's access to a circle
export type Access = {
  // The name of the access
  //
  // Behaviors: IDENTIFIER
  name: string | undefined;
  // the name of the requesting user
  //
  // Behaviors: OUTPUT_ONLY
  requester: Access_Requester | undefined;
  // the name of the receiving user
  //
  // Behaviors: REQUIRED
  recipient: Access_User | undefined;
  // the permission level of the access
  //
  // Behaviors: REQUIRED
  level: apitypes_PermissionLevel | undefined;
  // the status of the access
  //
  // Behaviors: OUTPUT_ONLY
  state: apitypes_AccessState | undefined;
  // the accept target of the access
  //
  // Behaviors: OUTPUT_ONLY
  acceptTarget: apitypes_AcceptTarget | undefined;
};

// the requester of the access
export type Access_Requester = {
  // the name of the user
  user?: string;
  // the name of the circle
  circle?: string;
};

// user data
export type Access_User = {
  // the name of the user
  //
  // Behaviors: REQUIRED
  name: string | undefined;
  // the username of the user
  //
  // Behaviors: OUTPUT_ONLY
  username: string | undefined;
  // the full name of the user
  //
  // Behaviors: OUTPUT_ONLY
  givenName: string | undefined;
  // the last name of the user
  //
  // Behaviors: OUTPUT_ONLY
  familyName: string | undefined;
};

// The request to create an access to a circle
export type CreateAccessRequest = {
  // parent
  //
  // Behaviors: REQUIRED
  parent: string | undefined;
  // The access to create
  //
  // Behaviors: REQUIRED
  access: Access | undefined;
};

// The request to delete an access to a circle
export type DeleteAccessRequest = {
  // name
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// The request to get an access to a circle
export type GetAccessRequest = {
  // name
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// The request to list accesses to a circle
export type ListAccessesRequest = {
  // parent
  //
  // Behaviors: REQUIRED
  parent: string | undefined;
  // The filter to apply to the list
  //
  // Behaviors: OPTIONAL
  filter: string | undefined;
  // The page size to apply to the list
  //
  // Behaviors: OPTIONAL
  pageSize: number | undefined;
  // The page token to apply to the list
  //
  // Behaviors: OPTIONAL
  pageToken: string | undefined;
};

// The response to list accesses to a circle
export type ListAccessesResponse = {
  // The list of accesses
  accesses: Access[] | undefined;
  // The next page token
  nextPageToken: string | undefined;
};

// The request to update an access to a circle
export type UpdateAccessRequest = {
  // access
  //
  // Behaviors: REQUIRED
  access: Access | undefined;
  // update mask
  //
  // Behaviors: OPTIONAL
  updateMask: wellKnownFieldMask | undefined;
};

// The request to accept an access to a circle
export type AcceptAccessRequest = {
  // name
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// The circle recipient list service
export interface CircleAccessService {
  // Create an access to a circle
  CreateAccess(request: CreateAccessRequest): Promise<Access>;
  // Delete an access to a circle
  DeleteAccess(request: DeleteAccessRequest): Promise<wellKnownEmpty>;
  // Get an access to a circle
  GetAccess(request: GetAccessRequest): Promise<Access>;
  // List accesses to a circle
  ListAccesses(request: ListAccessesRequest): Promise<ListAccessesResponse>;
  // Update an access to a circle
  UpdateAccess(request: UpdateAccessRequest): Promise<Access>;
  // Accept a circle access
  AcceptAccess(request: AcceptAccessRequest): Promise<Access>;
}

export function createCircleAccessServiceClient(
  handler: RequestHandler
): CircleAccessService {
  return {
    CreateAccess(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.parent) {
        throw new Error("missing required field request.parent");
      }
      const path = `circles/v1alpha1/${request.parent}/accesses`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.access ?? {});
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "CircleAccessService",
        method: "CreateAccess",
      }) as Promise<Access>;
    },
    DeleteAccess(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `circles/v1alpha1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }, {
        service: "CircleAccessService",
        method: "DeleteAccess",
      }) as Promise<wellKnownEmpty>;
    },
    GetAccess(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `circles/v1alpha1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "CircleAccessService",
        method: "GetAccess",
      }) as Promise<Access>;
    },
    ListAccesses(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.parent) {
        throw new Error("missing required field request.parent");
      }
      const path = `circles/v1alpha1/${request.parent}/accesses`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.filter) {
        queryParams.push(`filter=${encodeURIComponent(request.filter.toString())}`)
      }
      if (request.pageSize) {
        queryParams.push(`pageSize=${encodeURIComponent(request.pageSize.toString())}`)
      }
      if (request.pageToken) {
        queryParams.push(`pageToken=${encodeURIComponent(request.pageToken.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "CircleAccessService",
        method: "ListAccesses",
      }) as Promise<ListAccessesResponse>;
    },
    UpdateAccess(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.access?.name) {
        throw new Error("missing required field request.access.name");
      }
      const path = `circles/v1alpha1/${request.access.name}`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.access ?? {});
      const queryParams: string[] = [];
      if (request.updateMask) {
        queryParams.push(`updateMask=${encodeURIComponent(request.updateMask.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PATCH",
        body,
      }, {
        service: "CircleAccessService",
        method: "UpdateAccess",
      }) as Promise<Access>;
    },
    AcceptAccess(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `circles/v1alpha1/${request.name}:accept`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "CircleAccessService",
        method: "AcceptAccess",
      }) as Promise<Access>;
    },
  };
}
// An empty JSON object
type wellKnownEmpty = Record<never, never>;


// @@protoc_insertion_point(typescript-http-eof)
