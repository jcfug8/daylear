// Code generated by protoc-gen-typescript-http. DO NOT EDIT.
/* eslint-disable camelcase */
// @ts-nocheck

// the main user object
export type User = {
  // the name of the user
  //
  // Behaviors: IDENTIFIER
  name: string | undefined;
  // the email of the user
  //
  // Behaviors: REQUIRED
  email: string | undefined;
  // the given name of the user
  //
  // Behaviors: REQUIRED
  givenName: string | undefined;
  // the family name of the user
  //
  // Behaviors: REQUIRED
  familyName: string | undefined;
};

// the request to create a user
export type CreateUserRequest = {
  // the user to create
  //
  // Behaviors: REQUIRED
  user: User | undefined;
  // the id of the user
  //
  // Behaviors: REQUIRED
  userId: string | undefined;
};

// the request to list users
export type ListUsersRequest = {
  // returned page
  //
  // Behaviors: OPTIONAL
  pageSize: number | undefined;
  // used to specify the page token
  //
  // Behaviors: OPTIONAL
  pageToken: string | undefined;
  // used to specify the filter
  //
  // Behaviors: OPTIONAL
  filter: string | undefined;
};

// the response to list users
export type ListUsersResponse = {
  // the users
  users: User[] | undefined;
  // the next page token
  nextPageToken: string | undefined;
};

// the request to update a user
export type UpdateUserRequest = {
  // the user to update
  //
  // Behaviors: REQUIRED
  user: User | undefined;
  // the fields to update
  //
  // Behaviors: OPTIONAL
  updateMask: wellKnownFieldMask | undefined;
};

// In JSON, a field mask is encoded as a single string where paths are
// separated by a comma. Fields name in each path are converted
// to/from lower-camel naming conventions.
// As an example, consider the following message declarations:
//
//     message Profile {
//       User user = 1;
//       Photo photo = 2;
//     }
//     message User {
//       string display_name = 1;
//       string address = 2;
//     }
//
// In proto a field mask for `Profile` may look as such:
//
//     mask {
//       paths: "user.display_name"
//       paths: "photo"
//     }
//
// In JSON, the same mask is represented as below:
//
//     {
//       mask: "user.displayName,photo"
//     }
type wellKnownFieldMask = string;

// the request to delete a user
export type DeleteUserRequest = {
  // the name of the user to delete
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// the request to get a user
export type GetUserRequest = {
  // the name of the user to get
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// the user service
export interface UserService {
  // get a user
  GetUser(request: GetUserRequest): Promise<User>;
}

type RequestType = {
  path: string;
  method: string;
  body: string | null;
};

type RequestHandler = (request: RequestType, meta: { service: string, method: string }) => Promise<unknown>;

export function createUserServiceClient(
  handler: RequestHandler
): UserService {
  return {
    GetUser(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `users/v1alpha1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "UserService",
        method: "GetUser",
      }) as Promise<User>;
    },
  };
}

// @@protoc_insertion_point(typescript-http-eof)
