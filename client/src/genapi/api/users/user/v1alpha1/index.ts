// Code generated by protoc-gen-typescript-http. DO NOT EDIT.
/* eslint-disable camelcase */
// @ts-nocheck

// the main user object with public fields
export type User = {
  // the name of the user
  //
  // Behaviors: IDENTIFIER
  name: string | undefined;
  // the username of the user
  //
  // Behaviors: OPTIONAL
  username: string | undefined;
  // the given name of the user
  //
  // Behaviors: OPTIONAL
  givenName: string | undefined;
  // the family name of the user
  //
  // Behaviors: OPTIONAL
  familyName: string | undefined;
  // the image url for the user
  //
  // Behaviors: OPTIONAL
  imageUri: string | undefined;
  // the bio for the user
  //
  // Behaviors: OPTIONAL
  bio: string | undefined;
  // the visibility of the user
  //
  // Behaviors: REQUIRED
  visibility: apitypes_VisibilityLevel | undefined;
  // the user access details
  //
  // Behaviors: OUTPUT_ONLY
  access: User_Access | undefined;
};

// the visibility levels
export type apitypes_VisibilityLevel =
  // the visibility is not specified
  | "VISIBILITY_LEVEL_UNSPECIFIED"
  // the visibility is public
  | "VISIBILITY_LEVEL_PUBLIC"
  // the visibility is restricted
  | "VISIBILITY_LEVEL_RESTRICTED"
  // the visibility is private
  | "VISIBILITY_LEVEL_PRIVATE"
  // the visibility is hidden
  | "VISIBILITY_LEVEL_HIDDEN";
// the user access details
export type User_Access = {
  // the name of the access
  //
  // Behaviors: OUTPUT_ONLY
  name: string | undefined;
  // the requester of the access
  //
  // Behaviors: OUTPUT_ONLY
  requester: string | undefined;
  // the permission of the access
  //
  // Behaviors: OUTPUT_ONLY
  permissionLevel: apitypes_PermissionLevel | undefined;
  // the access state of the user to the access
  //
  // Behaviors: OUTPUT_ONLY
  state: apitypes_AccessState | undefined;
};

// the permission levels
export type apitypes_PermissionLevel =
  // the permission is not specified
  | "PERMISSION_LEVEL_UNSPECIFIED"
  // the permission is public
  | "PERMISSION_LEVEL_PUBLIC"
  // the permission is read
  | "PERMISSION_LEVEL_READ"
  // the permission is write
  | "PERMISSION_LEVEL_WRITE"
  // the permission is admin
  | "PERMISSION_LEVEL_ADMIN";
// the visibility levels
export type apitypes_AccessState =
  // This status should never get used.
  | "ACCESS_STATE_UNSPECIFIED"
  // The access is pending and can either be accepted or deleted.
  | "ACCESS_STATE_PENDING"
  // The access is accepted and can be deleted.
  | "ACCESS_STATE_ACCEPTED";
// the request to get a user
export type GetUserRequest = {
  // the name of the user to get
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// the request to list users
export type ListUsersRequest = {
  // returned page
  //
  // Behaviors: OPTIONAL
  pageSize: number | undefined;
  // used to specify the page token
  //
  // Behaviors: OPTIONAL
  pageToken: string | undefined;
  // used to specify the filter
  //
  // Behaviors: OPTIONAL
  filter: string | undefined;
  // the parent of the users
  //
  // Behaviors: OPTIONAL
  parent: string | undefined;
};

// the response to list users
export type ListUsersResponse = {
  // the users
  users: User[] | undefined;
  // the next page token
  nextPageToken: string | undefined;
};

// the request to update a user
export type UpdateUserRequest = {
  // the user to update
  //
  // Behaviors: REQUIRED
  user: User | undefined;
  // the fields to update
  //
  // Behaviors: OPTIONAL
  updateMask: wellKnownFieldMask | undefined;
};

// In JSON, a field mask is encoded as a single string where paths are
// separated by a comma. Fields name in each path are converted
// to/from lower-camel naming conventions.
// As an example, consider the following message declarations:
//
//     message Profile {
//       User user = 1;
//       Photo photo = 2;
//     }
//     message User {
//       string display_name = 1;
//       string address = 2;
//     }
//
// In proto a field mask for `Profile` may look as such:
//
//     mask {
//       paths: "user.display_name"
//       paths: "photo"
//     }
//
// In JSON, the same mask is represented as below:
//
//     {
//       mask: "user.displayName,photo"
//     }
type wellKnownFieldMask = string;

// the user service
export interface UserService {
  // get a user
  GetUser(request: GetUserRequest): Promise<User>;
  // list users
  ListUsers(request: ListUsersRequest): Promise<ListUsersResponse>;
  // update a user
  UpdateUser(request: UpdateUserRequest): Promise<User>;
}

type RequestType = {
  path: string;
  method: string;
  body: string | null;
};

type RequestHandler = (request: RequestType, meta: { service: string, method: string }) => Promise<unknown>;

export function createUserServiceClient(
  handler: RequestHandler
): UserService {
  return {
    GetUser(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `users/v1alpha1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "UserService",
        method: "GetUser",
      }) as Promise<User>;
    },
    ListUsers(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `users/v1alpha1/users`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.pageSize) {
        queryParams.push(`pageSize=${encodeURIComponent(request.pageSize.toString())}`)
      }
      if (request.pageToken) {
        queryParams.push(`pageToken=${encodeURIComponent(request.pageToken.toString())}`)
      }
      if (request.filter) {
        queryParams.push(`filter=${encodeURIComponent(request.filter.toString())}`)
      }
      if (request.parent) {
        queryParams.push(`parent=${encodeURIComponent(request.parent.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "UserService",
        method: "ListUsers",
      }) as Promise<ListUsersResponse>;
    },
    UpdateUser(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.user?.name) {
        throw new Error("missing required field request.user.name");
      }
      const path = `users/v1alpha1/${request.user.name}`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.user ?? {});
      const queryParams: string[] = [];
      if (request.updateMask) {
        queryParams.push(`updateMask=${encodeURIComponent(request.updateMask.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PATCH",
        body,
      }, {
        service: "UserService",
        method: "UpdateUser",
      }) as Promise<User>;
    },
  };
}
// This represents the data about a user's access to a user
export type Access = {
  // The name of the access
  //
  // Behaviors: IDENTIFIER
  name: string | undefined;
  // the name of the requesting user
  //
  // Behaviors: OUTPUT_ONLY
  requester: Access_User | undefined;
  // the name of the receiving user
  //
  // Behaviors: REQUIRED
  recipient: Access_User | undefined;
  // the permission level of the access
  //
  // Behaviors: REQUIRED
  level: apitypes_PermissionLevel | undefined;
  // the status of the access
  //
  // Behaviors: OUTPUT_ONLY
  state: apitypes_AccessState | undefined;
};

// user data
export type Access_User = {
  // the name of the user
  //
  // Behaviors: REQUIRED
  name: string | undefined;
  // the username of the user
  //
  // Behaviors: OUTPUT_ONLY
  username: string | undefined;
  // the given name of the user
  //
  // Behaviors: OUTPUT_ONLY
  givenName: string | undefined;
  // the family name of the user
  //
  // Behaviors: OUTPUT_ONLY
  familyName: string | undefined;
};

// The request to create an access to a user
export type CreateAccessRequest = {
  // parent
  //
  // Behaviors: REQUIRED
  parent: string | undefined;
  // The access to create
  //
  // Behaviors: REQUIRED
  access: Access | undefined;
};

// The request to delete an access to a user
export type DeleteAccessRequest = {
  // name
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// The request to get an access to a user
export type GetAccessRequest = {
  // name
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// The request to list accesses to a user
export type ListAccessesRequest = {
  // parent
  //
  // Behaviors: REQUIRED
  parent: string | undefined;
  // The filter to apply to the list
  //
  // Behaviors: OPTIONAL
  filter: string | undefined;
  // The page size to apply to the list
  //
  // Behaviors: OPTIONAL
  pageSize: number | undefined;
  // The page token to apply to the list
  //
  // Behaviors: OPTIONAL
  pageToken: string | undefined;
};

// The response to list accesses to a user
export type ListAccessesResponse = {
  // The list of accesses
  accesses: Access[] | undefined;
  // The next page token
  nextPageToken: string | undefined;
};

// The request to update an access to a user
export type UpdateAccessRequest = {
  // access
  //
  // Behaviors: REQUIRED
  access: Access | undefined;
  // update mask
  //
  // Behaviors: OPTIONAL
  updateMask: wellKnownFieldMask | undefined;
};

// The request to accept an access to a user
export type AcceptAccessRequest = {
  // name
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// The user recipient list service
export interface UserAccessService {
  // Create an access to a user
  CreateAccess(request: CreateAccessRequest): Promise<Access>;
  // Delete an access to a user
  DeleteAccess(request: DeleteAccessRequest): Promise<wellKnownEmpty>;
  // Get an access to a user
  GetAccess(request: GetAccessRequest): Promise<Access>;
  // List accesses to a user
  ListAccesses(request: ListAccessesRequest): Promise<ListAccessesResponse>;
  // Accept a user access
  AcceptAccess(request: AcceptAccessRequest): Promise<Access>;
}

export function createUserAccessServiceClient(
  handler: RequestHandler
): UserAccessService {
  return {
    CreateAccess(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.parent) {
        throw new Error("missing required field request.parent");
      }
      const path = `users/v1alpha1/${request.parent}/accesses`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.access ?? {});
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "UserAccessService",
        method: "CreateAccess",
      }) as Promise<Access>;
    },
    DeleteAccess(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `users/v1alpha1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }, {
        service: "UserAccessService",
        method: "DeleteAccess",
      }) as Promise<wellKnownEmpty>;
    },
    GetAccess(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `users/v1alpha1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "UserAccessService",
        method: "GetAccess",
      }) as Promise<Access>;
    },
    ListAccesses(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.parent) {
        throw new Error("missing required field request.parent");
      }
      const path = `users/v1alpha1/${request.parent}/accesses`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.filter) {
        queryParams.push(`filter=${encodeURIComponent(request.filter.toString())}`)
      }
      if (request.pageSize) {
        queryParams.push(`pageSize=${encodeURIComponent(request.pageSize.toString())}`)
      }
      if (request.pageToken) {
        queryParams.push(`pageToken=${encodeURIComponent(request.pageToken.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "UserAccessService",
        method: "ListAccesses",
      }) as Promise<ListAccessesResponse>;
    },
    AcceptAccess(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `users/v1alpha1/${request.name}:accept`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "UserAccessService",
        method: "AcceptAccess",
      }) as Promise<Access>;
    },
  };
}
// An empty JSON object
type wellKnownEmpty = Record<never, never>;

// the main user settings object
export type UserSettings = {
  // the name of the user
  //
  // Behaviors: IDENTIFIER
  name: string | undefined;
  // the email of the user
  //
  // Behaviors: OUTPUT_ONLY
  email: string | undefined;
};

// the request to get user settings
export type GetUserSettingsRequest = {
  // the name of the user settings to get
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// the request to update a user
export type UpdateUserSettingsRequest = {
  // the user settings to update
  //
  // Behaviors: REQUIRED
  userSettings: UserSettings | undefined;
  // the fields to update
  //
  // Behaviors: OPTIONAL
  updateMask: wellKnownFieldMask | undefined;
};

// the user settings service with private fields
export interface UserSettingsService {
  // get a user
  GetUserSettings(request: GetUserSettingsRequest): Promise<UserSettings>;
  // update a user settings
  UpdateUserSettings(request: UpdateUserSettingsRequest): Promise<UserSettings>;
}

export function createUserSettingsServiceClient(
  handler: RequestHandler
): UserSettingsService {
  return {
    GetUserSettings(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `users/v1alpha1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "UserSettingsService",
        method: "GetUserSettings",
      }) as Promise<UserSettings>;
    },
    UpdateUserSettings(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.userSettings?.name) {
        throw new Error("missing required field request.user_settings.name");
      }
      const path = `users/v1alpha1/${request.userSettings.name}`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.userSettings ?? {});
      const queryParams: string[] = [];
      if (request.updateMask) {
        queryParams.push(`updateMask=${encodeURIComponent(request.updateMask.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PATCH",
        body,
      }, {
        service: "UserSettingsService",
        method: "UpdateUserSettings",
      }) as Promise<UserSettings>;
    },
  };
}

// @@protoc_insertion_point(typescript-http-eof)
