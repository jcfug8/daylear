// Code generated by protoc-gen-typescript-http. DO NOT EDIT.
/* eslint-disable camelcase */
// @ts-nocheck

// the main user calendar
export type Calendar = {
  // the name of the calendar
  //
  // Behaviors: IDENTIFIER
  name: string | undefined;
  // the title of the calendar
  //
  // Behaviors: REQUIRED
  title: string | undefined;
  // the description of the calendar
  //
  // Behaviors: OPTIONAL
  description: string | undefined;
  // the visibility of the calendar
  //
  // Behaviors: REQUIRED
  visibility: apitypes_VisibilityLevel | undefined;
  // calendar access data
  //
  // Behaviors: OUTPUT_ONLY
  calendarAccess: Calendar_CalendarAccess | undefined;
};

// the visibility levels
export type apitypes_VisibilityLevel =
  // the visibility is not specified
  | "VISIBILITY_LEVEL_UNSPECIFIED"
  // the visibility is public
  | "VISIBILITY_LEVEL_PUBLIC"
  // the visibility is restricted
  | "VISIBILITY_LEVEL_RESTRICTED"
  // the visibility is private
  | "VISIBILITY_LEVEL_PRIVATE"
  // the visibility is hidden
  | "VISIBILITY_LEVEL_HIDDEN";
// the calendar access details
export type Calendar_CalendarAccess = {
  // the name of the calendar access
  //
  // Behaviors: OUTPUT_ONLY
  name: string | undefined;
  // the permission of the calendar
  //
  // Behaviors: OUTPUT_ONLY
  permissionLevel: apitypes_PermissionLevel | undefined;
  // the access state of the user to the calendar
  //
  // Behaviors: OUTPUT_ONLY
  state: apitypes_AccessState | undefined;
  // the target of the accept action
  //
  // Behaviors: OUTPUT_ONLY
  acceptTarget: apitypes_AcceptTarget | undefined;
};

// the permission levels
export type apitypes_PermissionLevel =
  // the permission is not specified
  | "PERMISSION_LEVEL_UNSPECIFIED"
  // the permission is public
  | "PERMISSION_LEVEL_PUBLIC"
  // the permission is read
  | "PERMISSION_LEVEL_READ"
  // the permission is write
  | "PERMISSION_LEVEL_WRITE"
  // the permission is admin
  | "PERMISSION_LEVEL_ADMIN";
// the visibility levels
export type apitypes_AccessState =
  // This status should never get used.
  | "ACCESS_STATE_UNSPECIFIED"
  // The access is pending and can either be accepted or deleted.
  | "ACCESS_STATE_PENDING"
  // The access is accepted and can be deleted.
  | "ACCESS_STATE_ACCEPTED";
// The target of the accept action, or who can accept the access request
export type apitypes_AcceptTarget =
  // Acceptance not required or not applicable
  | "ACCEPT_TARGET_UNSPECIFIED"
  // The recipient or someone with correct access to the recipient can accept the access request
  | "ACCEPT_TARGET_RECIPIENT"
  // The resource owner or someone with correct access to the resource can accept the access request
  | "ACCEPT_TARGET_RESOURCE";
// the request to create a calendar
export type CreateCalendarRequest = {
  // the parent of the calendar
  //
  // Behaviors: OPTIONAL
  parent: string | undefined;
  // the calendar to create
  //
  // Behaviors: REQUIRED
  calendar: Calendar | undefined;
};

// the request to list calendars
export type ListCalendarsRequest = {
  // the parent of the calendars
  //
  // Behaviors: REQUIRED
  parent: string | undefined;
  // the page size
  //
  // Behaviors: OPTIONAL
  pageSize: number | undefined;
  // the page token
  //
  // Behaviors: OPTIONAL
  pageToken: string | undefined;
  // used to specify the filter
  //
  // Behaviors: OPTIONAL
  filter: string | undefined;
};

// the response to list calendars
export type ListCalendarsResponse = {
  // the calendars
  calendars: Calendar[] | undefined;
  // the next page token
  nextPageToken: string | undefined;
};

// the request to update a calendar
export type UpdateCalendarRequest = {
  // the calendar to update
  //
  // Behaviors: REQUIRED
  calendar: Calendar | undefined;
  // the fields to update
  //
  // Behaviors: OPTIONAL
  updateMask: wellKnownFieldMask | undefined;
};

// In JSON, a field mask is encoded as a single string where paths are
// separated by a comma. Fields name in each path are converted
// to/from lower-camel naming conventions.
// As an example, consider the following message declarations:
//
//     message Profile {
//       User user = 1;
//       Photo photo = 2;
//     }
//     message User {
//       string display_name = 1;
//       string address = 2;
//     }
//
// In proto a field mask for `Profile` may look as such:
//
//     mask {
//       paths: "user.display_name"
//       paths: "photo"
//     }
//
// In JSON, the same mask is represented as below:
//
//     {
//       mask: "user.displayName,photo"
//     }
type wellKnownFieldMask = string;

// the request to delete a calendar
export type DeleteCalendarRequest = {
  // the name of the calendar
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// the request to get a calendar
export type GetCalendarRequest = {
  // the name of the calendar
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// the calendar service
export interface CalendarService {
  // create a calendar
  CreateCalendar(request: CreateCalendarRequest): Promise<Calendar>;
  // list calendars
  ListCalendars(request: ListCalendarsRequest): Promise<ListCalendarsResponse>;
  // update a calendar
  UpdateCalendar(request: UpdateCalendarRequest): Promise<Calendar>;
  // delete` a calendar
  DeleteCalendar(request: DeleteCalendarRequest): Promise<Calendar>;
  // get a calendar
  GetCalendar(request: GetCalendarRequest): Promise<Calendar>;
}

type RequestType = {
  path: string;
  method: string;
  body: string | null;
};

type RequestHandler = (request: RequestType, meta: { service: string, method: string }) => Promise<unknown>;

export function createCalendarServiceClient(
  handler: RequestHandler
): CalendarService {
  return {
    CreateCalendar(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `calendars/v1alpha1/calendars`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.calendar ?? {});
      const queryParams: string[] = [];
      if (request.parent) {
        queryParams.push(`parent=${encodeURIComponent(request.parent.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "CalendarService",
        method: "CreateCalendar",
      }) as Promise<Calendar>;
    },
    ListCalendars(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `calendars/v1alpha1/calendars`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.parent) {
        queryParams.push(`parent=${encodeURIComponent(request.parent.toString())}`)
      }
      if (request.pageSize) {
        queryParams.push(`pageSize=${encodeURIComponent(request.pageSize.toString())}`)
      }
      if (request.pageToken) {
        queryParams.push(`pageToken=${encodeURIComponent(request.pageToken.toString())}`)
      }
      if (request.filter) {
        queryParams.push(`filter=${encodeURIComponent(request.filter.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "CalendarService",
        method: "ListCalendars",
      }) as Promise<ListCalendarsResponse>;
    },
    UpdateCalendar(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.calendar?.name) {
        throw new Error("missing required field request.calendar.name");
      }
      const path = `calendars/v1alpha1/${request.calendar.name}`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.calendar ?? {});
      const queryParams: string[] = [];
      if (request.updateMask) {
        queryParams.push(`updateMask=${encodeURIComponent(request.updateMask.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PATCH",
        body,
      }, {
        service: "CalendarService",
        method: "UpdateCalendar",
      }) as Promise<Calendar>;
    },
    DeleteCalendar(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `calendars/v1alpha1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }, {
        service: "CalendarService",
        method: "DeleteCalendar",
      }) as Promise<Calendar>;
    },
    GetCalendar(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `calendars/v1alpha1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "CalendarService",
        method: "GetCalendar",
      }) as Promise<Calendar>;
    },
  };
}
// This represents the data about a user's access to a calendar
export type Access = {
  // The name of the access
  //
  // Behaviors: IDENTIFIER
  name: string | undefined;
  // the name of the requesting user
  //
  // Behaviors: OUTPUT_ONLY
  requester: Access_RequesterOrRecipient | undefined;
  // the name of the receiving user
  //
  // Behaviors: REQUIRED, IMMUTABLE
  recipient: Access_RequesterOrRecipient | undefined;
  // the permission level of the access
  //
  // Behaviors: REQUIRED
  level: apitypes_PermissionLevel | undefined;
  // the status of the access
  //
  // Behaviors: OUTPUT_ONLY
  state: apitypes_AccessState | undefined;
  // the target of the accept action
  //
  // Behaviors: OUTPUT_ONLY
  acceptTarget: apitypes_AcceptTarget | undefined;
};

// the requester of the access
export type Access_RequesterOrRecipient = {
  // the name of the user
  user?: Access_User;
  // the name of the circle
  circle?: Access_Circle;
};

// user data
export type Access_User = {
  // the name of the user
  //
  // Behaviors: REQUIRED
  name: string | undefined;
  // the username of the user
  //
  // Behaviors: OUTPUT_ONLY
  username: string | undefined;
  // the full name of the user
  //
  // Behaviors: OUTPUT_ONLY
  givenName: string | undefined;
  // the last name of the user
  //
  // Behaviors: OUTPUT_ONLY
  familyName: string | undefined;
};

// circle data
export type Access_Circle = {
  // the name of the circle
  //
  // Behaviors: REQUIRED
  name: string | undefined;
  // the title of the circle
  //
  // Behaviors: OUTPUT_ONLY
  title: string | undefined;
  // the handle of the circle
  //
  // Behaviors: OUTPUT_ONLY
  handle: string | undefined;
};

// The request to create an access to a calendar
export type CreateAccessRequest = {
  // parent
  //
  // Behaviors: REQUIRED
  parent: string | undefined;
  // The access to create
  //
  // Behaviors: REQUIRED
  access: Access | undefined;
};

// The request to delete an access to a calendar
export type DeleteAccessRequest = {
  // name
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// The request to get an access to a calendar
export type GetAccessRequest = {
  // name
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// The request to list accesses to a calendar
export type ListAccessesRequest = {
  // parent
  //
  // Behaviors: REQUIRED
  parent: string | undefined;
  // The filter to apply to the list
  //
  // Behaviors: OPTIONAL
  filter: string | undefined;
  // The page size to apply to the list
  //
  // Behaviors: OPTIONAL
  pageSize: number | undefined;
  // The page token to apply to the list
  //
  // Behaviors: OPTIONAL
  pageToken: string | undefined;
};

// The response to list accesses to a calendar
export type ListAccessesResponse = {
  // The list of accesses
  accesses: Access[] | undefined;
  // The next page token
  nextPageToken: string | undefined;
};

// The request to update an access to a calendar
export type UpdateAccessRequest = {
  // access
  //
  // Behaviors: REQUIRED
  access: Access | undefined;
  // update mask
  //
  // Behaviors: OPTIONAL
  updateMask: wellKnownFieldMask | undefined;
};

// The request to accept an access to a calendar
export type AcceptAccessRequest = {
  // name
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// The calendar recipient list service
export interface CalendarAccessService {
  // Create an access to a calendar
  CreateAccess(request: CreateAccessRequest): Promise<Access>;
  // Delete an access to a calendar
  DeleteAccess(request: DeleteAccessRequest): Promise<wellKnownEmpty>;
  // Get an access to a calendar
  GetAccess(request: GetAccessRequest): Promise<Access>;
  // List accesses to a calendar
  ListAccesses(request: ListAccessesRequest): Promise<ListAccessesResponse>;
  // Update an access to a calendar
  UpdateAccess(request: UpdateAccessRequest): Promise<Access>;
  // Accept a calendar access
  AcceptAccess(request: AcceptAccessRequest): Promise<Access>;
}

export function createCalendarAccessServiceClient(
  handler: RequestHandler
): CalendarAccessService {
  return {
    CreateAccess(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.parent) {
        throw new Error("missing required field request.parent");
      }
      const path = `calendars/v1alpha1/${request.parent}/accesses`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.access ?? {});
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "CalendarAccessService",
        method: "CreateAccess",
      }) as Promise<Access>;
    },
    DeleteAccess(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `calendars/v1alpha1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }, {
        service: "CalendarAccessService",
        method: "DeleteAccess",
      }) as Promise<wellKnownEmpty>;
    },
    GetAccess(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `calendars/v1alpha1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "CalendarAccessService",
        method: "GetAccess",
      }) as Promise<Access>;
    },
    ListAccesses(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.parent) {
        throw new Error("missing required field request.parent");
      }
      const path = `calendars/v1alpha1/${request.parent}/accesses`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.filter) {
        queryParams.push(`filter=${encodeURIComponent(request.filter.toString())}`)
      }
      if (request.pageSize) {
        queryParams.push(`pageSize=${encodeURIComponent(request.pageSize.toString())}`)
      }
      if (request.pageToken) {
        queryParams.push(`pageToken=${encodeURIComponent(request.pageToken.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "CalendarAccessService",
        method: "ListAccesses",
      }) as Promise<ListAccessesResponse>;
    },
    UpdateAccess(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.access?.name) {
        throw new Error("missing required field request.access.name");
      }
      const path = `calendars/v1alpha1/${request.access.name}`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.access ?? {});
      const queryParams: string[] = [];
      if (request.updateMask) {
        queryParams.push(`updateMask=${encodeURIComponent(request.updateMask.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PATCH",
        body,
      }, {
        service: "CalendarAccessService",
        method: "UpdateAccess",
      }) as Promise<Access>;
    },
    AcceptAccess(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `calendars/v1alpha1/${request.name}:accept`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "CalendarAccessService",
        method: "AcceptAccess",
      }) as Promise<Access>;
    },
  };
}
// An empty JSON object
type wellKnownEmpty = Record<never, never>;

// the main user event
export type Event = {
  // the name of the event
  //
  // Behaviors: IDENTIFIER
  name: string | undefined;
  // the title of the event
  //
  // Behaviors: REQUIRED
  title: string | undefined;
  // the start time of the event
  //
  // Behaviors: REQUIRED
  startTime: wellKnownTimestamp | undefined;
  // the end time of the event
  //
  // Behaviors: REQUIRED
  endTime: wellKnownTimestamp | undefined;
  // the description of the event
  //
  // Behaviors: OPTIONAL
  description: string | undefined;
  // the location of the event
  //
  // Behaviors: OPTIONAL
  location: string | undefined;
  // the url of the event
  //
  // Behaviors: OPTIONAL
  uri: string | undefined;
  // the recurrence rule of the event
  //
  // Behaviors: OPTIONAL
  recurrenceRule: string | undefined;
  // the start time of the event in the set of recurring events that was overidden
  //
  // Behaviors: OPTIONAL
  overridenStartTime: wellKnownTimestamp | undefined;
  // the excluded dates of the event
  //
  // Behaviors: OPTIONAL
  excludedTimes: wellKnownTimestamp[] | undefined;
  // the additional dates of the event
  //
  // Behaviors: OPTIONAL
  additionalTimes: wellKnownTimestamp[] | undefined;
  // the parent event id of the event
  //
  // Behaviors: OPTIONAL
  parentEventId: number | undefined;
  // the alarms of the event
  //
  // Behaviors: OPTIONAL
  alarms: Event_Alarm[] | undefined;
  // geo location of the event
  //
  // Behaviors: OPTIONAL
  geo: googletype_LatLng | undefined;
  // the recurrence end time of the event
  //
  // Behaviors: OUTPUT_ONLY
  recurrenceEndTime: wellKnownTimestamp | undefined;
};

// Encoded using RFC 3339, where generated output will always be Z-normalized
// and uses 0, 3, 6 or 9 fractional digits.
// Offsets other than "Z" are also accepted.
type wellKnownTimestamp = string;

// the alarms of the event
export type Event_Alarm = {
  // the alarm id
  //
  // Behaviors: REQUIRED
  alarmId: string | undefined;
  // the trigger of the alarm
  //
  // Behaviors: REQUIRED
  trigger: Event_Alarm_Trigger | undefined;
};

// the trigger of the alarm
export type Event_Alarm_Trigger = {
  // the duration of the alarm
  duration?: wellKnownDuration;
  // the date time of the alarm
  dateTime?: wellKnownTimestamp;
};

// Generated output always contains 0, 3, 6, or 9 fractional digits,
// depending on required precision, followed by the suffix "s".
// Accepted are any fractional digits (also none) as long as they fit
// into nano-seconds precision and the suffix "s" is required.
type wellKnownDuration = string;

// An object that represents a latitude/longitude pair. This is expressed as a
// pair of doubles to represent degrees latitude and degrees longitude. Unless
// specified otherwise, this must conform to the
// <a href="http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf">WGS84
// standard</a>. Values must be within normalized ranges.
export type googletype_LatLng = {
  // The latitude in degrees. It must be in the range [-90.0, +90.0].
  latitude: number | undefined;
  // The longitude in degrees. It must be in the range [-180.0, +180.0].
  longitude: number | undefined;
};

// CreateEventRequest is the request message for creating an event
export type CreateEventRequest = {
  // The parent resource name
  //
  // Behaviors: REQUIRED
  parent: string | undefined;
  // The event to create
  //
  // Behaviors: REQUIRED
  event: Event | undefined;
};

// GetEventRequest is the request message for getting an event
export type GetEventRequest = {
  // The name of the event to retrieve
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// ListEventsRequest is the request message for listing events
export type ListEventsRequest = {
  // The parent resource name
  //
  // Behaviors: REQUIRED
  parent: string | undefined;
  // The maximum number of events to return
  //
  // Behaviors: OPTIONAL
  pageSize: number | undefined;
  // The next_page_token value returned from a previous List request, if any
  //
  // Behaviors: OPTIONAL
  pageToken: string | undefined;
  // A filter expression that filters events listed in the response
  //
  // Behaviors: OPTIONAL
  filter: string | undefined;
};

// ListEventsResponse is the response message for listing events
export type ListEventsResponse = {
  // The list of events
  events: Event[] | undefined;
  // Token to retrieve the next page of results, or empty if there are no more results
  nextPageToken: string | undefined;
};

// UpdateEventRequest is the request message for updating an event
export type UpdateEventRequest = {
  // The event to update
  //
  // Behaviors: REQUIRED
  event: Event | undefined;
  // The list of fields to update
  //
  // Behaviors: OPTIONAL
  updateMask: wellKnownFieldMask | undefined;
};

// DeleteEventRequest is the request message for deleting an event
export type DeleteEventRequest = {
  // The name of the event to delete
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// the event service
export interface EventService {
  // CreateEvent creates a new event
  CreateEvent(request: CreateEventRequest): Promise<Event>;
  // GetEvent gets an event
  GetEvent(request: GetEventRequest): Promise<Event>;
  // ListEvents lists events
  ListEvents(request: ListEventsRequest): Promise<ListEventsResponse>;
  // UpdateEvent updates an event
  UpdateEvent(request: UpdateEventRequest): Promise<Event>;
  // DeleteEvent deletes an event
  DeleteEvent(request: DeleteEventRequest): Promise<Event>;
}

export function createEventServiceClient(
  handler: RequestHandler
): EventService {
  return {
    CreateEvent(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.parent) {
        throw new Error("missing required field request.parent");
      }
      const path = `calendars/v1alpha1/${request.parent}/events`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.event ?? {});
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "EventService",
        method: "CreateEvent",
      }) as Promise<Event>;
    },
    GetEvent(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `calendars/v1alpha1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "EventService",
        method: "GetEvent",
      }) as Promise<Event>;
    },
    ListEvents(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.parent) {
        throw new Error("missing required field request.parent");
      }
      const path = `calendars/v1alpha1/${request.parent}/events`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.pageSize) {
        queryParams.push(`pageSize=${encodeURIComponent(request.pageSize.toString())}`)
      }
      if (request.pageToken) {
        queryParams.push(`pageToken=${encodeURIComponent(request.pageToken.toString())}`)
      }
      if (request.filter) {
        queryParams.push(`filter=${encodeURIComponent(request.filter.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "EventService",
        method: "ListEvents",
      }) as Promise<ListEventsResponse>;
    },
    UpdateEvent(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.event?.name) {
        throw new Error("missing required field request.event.name");
      }
      const path = `calendars/v1alpha1/${request.event.name}`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.event ?? {});
      const queryParams: string[] = [];
      if (request.updateMask) {
        queryParams.push(`updateMask=${encodeURIComponent(request.updateMask.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PATCH",
        body,
      }, {
        service: "EventService",
        method: "UpdateEvent",
      }) as Promise<Event>;
    },
    DeleteEvent(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `calendars/v1alpha1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }, {
        service: "EventService",
        method: "DeleteEvent",
      }) as Promise<Event>;
    },
  };
}

// @@protoc_insertion_point(typescript-http-eof)
