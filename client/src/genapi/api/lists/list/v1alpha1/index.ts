// Code generated by protoc-gen-typescript-http. DO NOT EDIT.
/* eslint-disable camelcase */
// @ts-nocheck

// the main list object
export type List = {
  // the name of the list
  //
  // Behaviors: IDENTIFIER
  name: string | undefined;
  // the title of the list
  //
  // Behaviors: REQUIRED
  title: string | undefined;
  // the description of the list
  //
  // Behaviors: OPTIONAL
  description: string | undefined;
  // show completed
  //
  // Behaviors: OPTIONAL
  showCompleted: boolean | undefined;
  // the visibility of the list
  //
  // Behaviors: REQUIRED
  visibility: apitypes_VisibilityLevel | undefined;
  // the access details for the current user/circle
  //
  // Behaviors: OUTPUT_ONLY
  listAccess: List_ListAccess | undefined;
  // the time the list was created (UTC)
  //
  // Behaviors: OUTPUT_ONLY
  createTime: wellKnownTimestamp | undefined;
  // the time the list was last updated (UTC)
  //
  // Behaviors: OUTPUT_ONLY
  updateTime: wellKnownTimestamp | undefined;
  // favorited
  //
  // Behaviors: OUTPUT_ONLY
  favorited: boolean | undefined;
  // the sections of the list
  //
  // Behaviors: OUTPUT_ONLY
  sections: List_ListSection[] | undefined;
};

// the visibility levels
export type apitypes_VisibilityLevel =
  // the visibility is not specified
  | "VISIBILITY_LEVEL_UNSPECIFIED"
  // the visibility is public
  | "VISIBILITY_LEVEL_PUBLIC"
  // the visibility is restricted
  | "VISIBILITY_LEVEL_RESTRICTED"
  // the visibility is private
  | "VISIBILITY_LEVEL_PRIVATE"
  // the visibility is hidden
  | "VISIBILITY_LEVEL_HIDDEN";
// the list access details
export type List_ListAccess = {
  // the name of the list access
  //
  // Behaviors: OUTPUT_ONLY
  name: string | undefined;
  // the permission of the list
  //
  // Behaviors: OUTPUT_ONLY
  permissionLevel: apitypes_PermissionLevel | undefined;
  // the access state of the user to the list
  //
  // Behaviors: OUTPUT_ONLY
  state: apitypes_AccessState | undefined;
  // the accept target of the list
  //
  // Behaviors: OUTPUT_ONLY
  acceptTarget: apitypes_AcceptTarget | undefined;
};

// the permission levels
export type apitypes_PermissionLevel =
  // the permission is not specified
  | "PERMISSION_LEVEL_UNSPECIFIED"
  // the permission is public
  | "PERMISSION_LEVEL_PUBLIC"
  // the permission is read
  | "PERMISSION_LEVEL_READ"
  // the permission is write
  | "PERMISSION_LEVEL_WRITE"
  // the permission is admin
  | "PERMISSION_LEVEL_ADMIN";
// the visibility levels
export type apitypes_AccessState =
  // This status should never get used.
  | "ACCESS_STATE_UNSPECIFIED"
  // The access is pending and can either be accepted or deleted.
  | "ACCESS_STATE_PENDING"
  // The access is accepted and can be deleted.
  | "ACCESS_STATE_ACCEPTED";
// The target of the accept action, or who can accept the access request
export type apitypes_AcceptTarget =
  // Acceptance not required or not applicable
  | "ACCEPT_TARGET_UNSPECIFIED"
  // The recipient or someone with correct access to the recipient can accept the access request
  | "ACCEPT_TARGET_RECIPIENT"
  // The resource owner or someone with correct access to the resource can accept the access request
  | "ACCEPT_TARGET_RESOURCE";
// Encoded using RFC 3339, where generated output will always be Z-normalized
// and uses 0, 3, 6 or 9 fractional digits.
// Offsets other than "Z" are also accepted.
type wellKnownTimestamp = string;

// the details for a list section
export type List_ListSection = {
  // the name of the list section
  //
  // Behaviors: OUTPUT_ONLY
  name: string | undefined;
  // the name of the list section
  //
  // Behaviors: REQUIRED
  title: string | undefined;
};

// the request to create a list
export type CreateListRequest = {
  // the list to create
  //
  // Behaviors: REQUIRED
  list: List | undefined;
  // the id of the list
  //
  // Behaviors: REQUIRED
  listId: string | undefined;
  // the parent of the list
  //
  // Behaviors: OPTIONAL
  parent: string | undefined;
};

// the request to list lists
export type ListListsRequest = {
  // returned page
  //
  // Behaviors: OPTIONAL
  pageSize: number | undefined;
  // used to specify the page token
  //
  // Behaviors: OPTIONAL
  pageToken: string | undefined;
  // used to specify the filter
  //
  // Behaviors: OPTIONAL
  filter: string | undefined;
  // the parent of the lists
  //
  // Behaviors: OPTIONAL
  parent: string | undefined;
};

// the response to list lists
export type ListListsResponse = {
  // the lists
  lists: List[] | undefined;
  // the next page token
  nextPageToken: string | undefined;
};

// the request to update a list
export type UpdateListRequest = {
  // the list to update
  //
  // Behaviors: REQUIRED
  list: List | undefined;
  // the fields to update
  //
  // Behaviors: OPTIONAL
  updateMask: wellKnownFieldMask | undefined;
};

// In JSON, a field mask is encoded as a single string where paths are
// separated by a comma. Fields name in each path are converted
// to/from lower-camel naming conventions.
// As an example, consider the following message declarations:
//
//     message Profile {
//       User user = 1;
//       Photo photo = 2;
//     }
//     message User {
//       string display_name = 1;
//       string address = 2;
//     }
//
// In proto a field mask for `Profile` may look as such:
//
//     mask {
//       paths: "user.display_name"
//       paths: "photo"
//     }
//
// In JSON, the same mask is represented as below:
//
//     {
//       mask: "user.displayName,photo"
//     }
type wellKnownFieldMask = string;

// the request to delete a list
export type DeleteListRequest = {
  // the name of the list to delete
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// the request to get a list
export type GetListRequest = {
  // the name of the list to get
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// the request to favorite a list
export type FavoriteListRequest = {
  // the name of the list to favorite
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// the response to favorite a list
export type FavoriteListResponse = {
};

// the request to unfavorite a list
export type UnfavoriteListRequest = {
  // the name of the list to unfavorite
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// the response to unfavorite a list
export type UnfavoriteListResponse = {
};

// the list service
export interface ListService {
  // create a list
  CreateList(request: CreateListRequest): Promise<List>;
  // list lists
  ListLists(request: ListListsRequest): Promise<ListListsResponse>;
  // update a list
  UpdateList(request: UpdateListRequest): Promise<List>;
  // delete` a list
  DeleteList(request: DeleteListRequest): Promise<List>;
  // get a list
  GetList(request: GetListRequest): Promise<List>;
  // favorite a list
  FavoriteList(request: FavoriteListRequest): Promise<FavoriteListResponse>;
  // unfavorite a list
  UnfavoriteList(request: UnfavoriteListRequest): Promise<UnfavoriteListResponse>;
}

type RequestType = {
  path: string;
  method: string;
  body: string | null;
};

type RequestHandler = (request: RequestType, meta: { service: string, method: string }) => Promise<unknown>;

export function createListServiceClient(
  handler: RequestHandler
): ListService {
  return {
    CreateList(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `lists/v1alpha1/lists`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.list ?? {});
      const queryParams: string[] = [];
      if (request.listId) {
        queryParams.push(`listId=${encodeURIComponent(request.listId.toString())}`)
      }
      if (request.parent) {
        queryParams.push(`parent=${encodeURIComponent(request.parent.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "ListService",
        method: "CreateList",
      }) as Promise<List>;
    },
    ListLists(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `lists/v1alpha1/lists`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.pageSize) {
        queryParams.push(`pageSize=${encodeURIComponent(request.pageSize.toString())}`)
      }
      if (request.pageToken) {
        queryParams.push(`pageToken=${encodeURIComponent(request.pageToken.toString())}`)
      }
      if (request.filter) {
        queryParams.push(`filter=${encodeURIComponent(request.filter.toString())}`)
      }
      if (request.parent) {
        queryParams.push(`parent=${encodeURIComponent(request.parent.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "ListService",
        method: "ListLists",
      }) as Promise<ListListsResponse>;
    },
    UpdateList(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.list?.name) {
        throw new Error("missing required field request.list.name");
      }
      const path = `lists/v1alpha1/${request.list.name}`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.list ?? {});
      const queryParams: string[] = [];
      if (request.updateMask) {
        queryParams.push(`updateMask=${encodeURIComponent(request.updateMask.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PATCH",
        body,
      }, {
        service: "ListService",
        method: "UpdateList",
      }) as Promise<List>;
    },
    DeleteList(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `lists/v1alpha1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }, {
        service: "ListService",
        method: "DeleteList",
      }) as Promise<List>;
    },
    GetList(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `lists/v1alpha1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "ListService",
        method: "GetList",
      }) as Promise<List>;
    },
    FavoriteList(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `meals/v1alpha1/${request.name}:favorite`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "ListService",
        method: "FavoriteList",
      }) as Promise<FavoriteListResponse>;
    },
    UnfavoriteList(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `meals/v1alpha1/${request.name}:unfavorite`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "ListService",
        method: "UnfavoriteList",
      }) as Promise<UnfavoriteListResponse>;
    },
  };
}
// This represents the data about a user's or circle's access to a list
export type Access = {
  // The name of the access
  //
  // Behaviors: IDENTIFIER
  name: string | undefined;
  // the name of the requester
  //
  // Behaviors: OUTPUT_ONLY
  requester: Access_RequesterOrRecipient | undefined;
  // the name of the recipient
  //
  // Behaviors: REQUIRED
  recipient: Access_RequesterOrRecipient | undefined;
  // the permission level of the access
  //
  // Behaviors: REQUIRED
  level: apitypes_PermissionLevel | undefined;
  // the status of the access
  //
  // Behaviors: OUTPUT_ONLY
  state: apitypes_AccessState | undefined;
  // the accept target of the access
  //
  // Behaviors: OUTPUT_ONLY
  acceptTarget: apitypes_AcceptTarget | undefined;
};

// the requester or recipient of the access
export type Access_RequesterOrRecipient = {
  // the name of the user
  user?: Access_User;
  // the name of the circle
  circle?: Access_Circle;
};

// user data
export type Access_User = {
  // the name of the user
  //
  // Behaviors: REQUIRED
  name: string | undefined;
  // the username of the user
  //
  // Behaviors: OUTPUT_ONLY
  username: string | undefined;
  // the full name of the user
  //
  // Behaviors: OUTPUT_ONLY
  givenName: string | undefined;
  // the last name of the user
  //
  // Behaviors: OUTPUT_ONLY
  familyName: string | undefined;
};

// circle data
export type Access_Circle = {
  // the name of the circle
  //
  // Behaviors: REQUIRED
  name: string | undefined;
  // the title of the circle
  //
  // Behaviors: OUTPUT_ONLY
  title: string | undefined;
  // the handle of the circle
  //
  // Behaviors: OUTPUT_ONLY
  handle: string | undefined;
};

// The request to create an access to a list
export type CreateAccessRequest = {
  // parent
  //
  // Behaviors: REQUIRED
  parent: string | undefined;
  // The access to create
  //
  // Behaviors: REQUIRED
  access: Access | undefined;
};

// The request to delete an access to a list
export type DeleteAccessRequest = {
  // name
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// The request to get an access to a list
export type GetAccessRequest = {
  // name
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// The request to list accesses to a list
export type ListAccessesRequest = {
  // parent
  //
  // Behaviors: REQUIRED
  parent: string | undefined;
  // The filter to apply to the list
  //
  // Behaviors: OPTIONAL
  filter: string | undefined;
  // The page size to apply to the list
  //
  // Behaviors: OPTIONAL
  pageSize: number | undefined;
  // The page token to apply to the list
  //
  // Behaviors: OPTIONAL
  pageToken: string | undefined;
};

// The response to list accesses to a list
export type ListAccessesResponse = {
  // The list of accesses
  accesses: Access[] | undefined;
  // The next page token
  nextPageToken: string | undefined;
};

// The request to update an access to a list
export type UpdateAccessRequest = {
  // access
  //
  // Behaviors: REQUIRED
  access: Access | undefined;
  // update mask
  //
  // Behaviors: OPTIONAL
  updateMask: wellKnownFieldMask | undefined;
};

// The request to accept a list access
export type AcceptListAccessRequest = {
  // name
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// The response to accept a list access
export type AcceptListAccessResponse = {
};

// The list recipient list service
export interface ListAccessService {
  // Create an access to a list
  CreateAccess(request: CreateAccessRequest): Promise<Access>;
  // Delete an access to a list
  DeleteAccess(request: DeleteAccessRequest): Promise<wellKnownEmpty>;
  // Get an access to a list
  GetAccess(request: GetAccessRequest): Promise<Access>;
  // List accesses to a list
  ListAccesses(request: ListAccessesRequest): Promise<ListAccessesResponse>;
  // Update an access to a list
  UpdateAccess(request: UpdateAccessRequest): Promise<Access>;
  // Accept a list access
  AcceptListAccess(request: AcceptListAccessRequest): Promise<AcceptListAccessResponse>;
}

export function createListAccessServiceClient(
  handler: RequestHandler
): ListAccessService {
  return {
    CreateAccess(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.parent) {
        throw new Error("missing required field request.parent");
      }
      const path = `lists/v1alpha1/${request.parent}/accesses`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.access ?? {});
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "ListAccessService",
        method: "CreateAccess",
      }) as Promise<Access>;
    },
    DeleteAccess(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `lists/v1alpha1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }, {
        service: "ListAccessService",
        method: "DeleteAccess",
      }) as Promise<wellKnownEmpty>;
    },
    GetAccess(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `lists/v1alpha1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "ListAccessService",
        method: "GetAccess",
      }) as Promise<Access>;
    },
    ListAccesses(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.parent) {
        throw new Error("missing required field request.parent");
      }
      const path = `lists/v1alpha1/${request.parent}/accesses`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.filter) {
        queryParams.push(`filter=${encodeURIComponent(request.filter.toString())}`)
      }
      if (request.pageSize) {
        queryParams.push(`pageSize=${encodeURIComponent(request.pageSize.toString())}`)
      }
      if (request.pageToken) {
        queryParams.push(`pageToken=${encodeURIComponent(request.pageToken.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "ListAccessService",
        method: "ListAccesses",
      }) as Promise<ListAccessesResponse>;
    },
    UpdateAccess(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.access?.name) {
        throw new Error("missing required field request.access.name");
      }
      const path = `lists/v1alpha1/${request.access.name}`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.access ?? {});
      const queryParams: string[] = [];
      if (request.updateMask) {
        queryParams.push(`updateMask=${encodeURIComponent(request.updateMask.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PATCH",
        body,
      }, {
        service: "ListAccessService",
        method: "UpdateAccess",
      }) as Promise<Access>;
    },
    AcceptListAccess(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `lists/v1alpha1/${request.name}:accept`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "ListAccessService",
        method: "AcceptListAccess",
      }) as Promise<AcceptListAccessResponse>;
    },
  };
}
// An empty JSON object
type wellKnownEmpty = Record<never, never>;

// the main listItem object
export type ListItem = {
  // the name of the listItem
  //
  // Behaviors: IDENTIFIER
  name: string | undefined;
  // the title of the listItem
  //
  // Behaviors: REQUIRED
  title: string | undefined;
  // List Section
  //
  // Behaviors: OPTIONAL
  listSection: string | undefined;
  // points
  //
  // Behaviors: OPTIONAL
  points: number | undefined;
  // the recurrence rule of the listItem
  //
  // Behaviors: OPTIONAL
  recurrenceRule: string | undefined;
  // the time the listItem was created (UTC)
  //
  // Behaviors: OUTPUT_ONLY
  createTime: wellKnownTimestamp | undefined;
  // the time the listItem was last updated (UTC)
  //
  // Behaviors: OUTPUT_ONLY
  updateTime: wellKnownTimestamp | undefined;
};

// the request to create a listItem
export type CreateListItemRequest = {
  // the parent of the listItem
  //
  // Behaviors: REQUIRED
  parent: string | undefined;
  // the listItem to create
  //
  // Behaviors: REQUIRED
  listItem: ListItem | undefined;
};

// the request to listItem listItems
export type ListListItemsRequest = {
  // the parent of the listItems
  //
  // Behaviors: REQUIRED
  parent: string | undefined;
  // returned page
  //
  // Behaviors: OPTIONAL
  pageSize: number | undefined;
  // used to specify the page token
  //
  // Behaviors: OPTIONAL
  pageToken: string | undefined;
  // used to specify the filter
  //
  // Behaviors: OPTIONAL
  filter: string | undefined;
};

// the response to listItem listItems
export type ListListItemsResponse = {
  // the listItems
  listItems: ListItem[] | undefined;
  // the next page token
  nextPageToken: string | undefined;
};

// the request to update a listItem
export type UpdateListItemRequest = {
  // the listItem to update
  //
  // Behaviors: REQUIRED
  listItem: ListItem | undefined;
  // the fields to update
  //
  // Behaviors: OPTIONAL
  updateMask: wellKnownFieldMask | undefined;
};

// the request to delete a listItem
export type DeleteListItemRequest = {
  // the name of the listItem to delete
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// the request to get a listItem
export type GetListItemRequest = {
  // the name of the listItem to get
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// the listItem service
export interface ListItemService {
  // create a listItem
  CreateListItem(request: CreateListItemRequest): Promise<ListItem>;
  // listItem listItems
  ListListItems(request: ListListItemsRequest): Promise<ListListItemsResponse>;
  // update a listItem
  UpdateListItem(request: UpdateListItemRequest): Promise<ListItem>;
  // delete` a listItem
  DeleteListItem(request: DeleteListItemRequest): Promise<ListItem>;
  // get a listItem
  GetListItem(request: GetListItemRequest): Promise<ListItem>;
}

export function createListItemServiceClient(
  handler: RequestHandler
): ListItemService {
  return {
    CreateListItem(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.parent) {
        throw new Error("missing required field request.parent");
      }
      const path = `lists/v1alpha1/${request.parent}/listItems`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.listItem ?? {});
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "ListItemService",
        method: "CreateListItem",
      }) as Promise<ListItem>;
    },
    ListListItems(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.parent) {
        throw new Error("missing required field request.parent");
      }
      const path = `lists/v1alpha1/${request.parent}/listItems`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.pageSize) {
        queryParams.push(`pageSize=${encodeURIComponent(request.pageSize.toString())}`)
      }
      if (request.pageToken) {
        queryParams.push(`pageToken=${encodeURIComponent(request.pageToken.toString())}`)
      }
      if (request.filter) {
        queryParams.push(`filter=${encodeURIComponent(request.filter.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "ListItemService",
        method: "ListListItems",
      }) as Promise<ListListItemsResponse>;
    },
    UpdateListItem(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.listItem?.name) {
        throw new Error("missing required field request.list_item.name");
      }
      const path = `lists/v1alpha1/${request.listItem.name}`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.listItem ?? {});
      const queryParams: string[] = [];
      if (request.updateMask) {
        queryParams.push(`updateMask=${encodeURIComponent(request.updateMask.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PATCH",
        body,
      }, {
        service: "ListItemService",
        method: "UpdateListItem",
      }) as Promise<ListItem>;
    },
    DeleteListItem(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `lists/v1alpha1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }, {
        service: "ListItemService",
        method: "DeleteListItem",
      }) as Promise<ListItem>;
    },
    GetListItem(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `lists/v1alpha1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "ListItemService",
        method: "GetListItem",
      }) as Promise<ListItem>;
    },
  };
}
// the main listItemCompletion object
export type ListItemCompletion = {
  // the name of the listItemCompletion
  //
  // Behaviors: IDENTIFIER
  name: string | undefined;
  // the title of the listItemCompletion
  //
  // Behaviors: REQUIRED
  title: string | undefined;
  // List Section
  //
  // Behaviors: REQUIRED
  listSection: string | undefined;
  // points
  //
  // Behaviors: REQUIRED
  points: number | undefined;
  // the time the listItemCompletion was created (UTC)
  //
  // Behaviors: OUTPUT_ONLY
  createTime: wellKnownTimestamp | undefined;
  // the time the listItemCompletion was last updated (UTC)
  //
  // Behaviors: OUTPUT_ONLY
  updateTime: wellKnownTimestamp | undefined;
};

// the request to create a listItemCompletion
export type CreateListItemCompletionRequest = {
  // the parent of the listItemCompletion
  //
  // Behaviors: REQUIRED
  parent: string | undefined;
  // the listItemCompletion to create
  //
  // Behaviors: REQUIRED
  listItemCompletion: ListItemCompletion | undefined;
};

// the request to listItemCompletion listItemCompletions
export type ListListItemCompletionsRequest = {
  // the parent of the listItemCompletions
  //
  // Behaviors: REQUIRED
  parent: string | undefined;
  // returned page
  //
  // Behaviors: OPTIONAL
  pageSize: number | undefined;
  // used to specify the page token
  //
  // Behaviors: OPTIONAL
  pageToken: string | undefined;
  // used to specify the filter
  //
  // Behaviors: OPTIONAL
  filter: string | undefined;
};

// the response to listItemCompletion listItemCompletions
export type ListListItemCompletionsResponse = {
  // the listItemCompletions
  listItemCompletions: ListItemCompletion[] | undefined;
  // the next page token
  nextPageToken: string | undefined;
};

// the request to update a listItemCompletion
export type UpdateListItemCompletionRequest = {
  // the listItemCompletion to update
  //
  // Behaviors: REQUIRED
  listItemCompletion: ListItemCompletion | undefined;
  // the fields to update
  //
  // Behaviors: OPTIONAL
  updateMask: wellKnownFieldMask | undefined;
};

// the request to delete a listItemCompletion
export type DeleteListItemCompletionRequest = {
  // the name of the listItemCompletion to delete
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// the request to get a listItemCompletion
export type GetListItemCompletionRequest = {
  // the name of the listItemCompletion to get
  //
  // Behaviors: REQUIRED
  name: string | undefined;
};

// the listItemCompletion service
export interface ListItemCompletionService {
  // create a listItemCompletion
  CreateListItemCompletion(request: CreateListItemCompletionRequest): Promise<ListItemCompletion>;
  // listItemCompletion listItemCompletions
  ListListItemCompletions(request: ListListItemCompletionsRequest): Promise<ListListItemCompletionsResponse>;
  // update a listItemCompletion
  UpdateListItemCompletion(request: UpdateListItemCompletionRequest): Promise<ListItemCompletion>;
  // delete` a listItemCompletion
  DeleteListItemCompletion(request: DeleteListItemCompletionRequest): Promise<ListItemCompletion>;
  // get a listItemCompletion
  GetListItemCompletion(request: GetListItemCompletionRequest): Promise<ListItemCompletion>;
}

export function createListItemCompletionServiceClient(
  handler: RequestHandler
): ListItemCompletionService {
  return {
    CreateListItemCompletion(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.parent) {
        throw new Error("missing required field request.parent");
      }
      const path = `lists/v1alpha1/${request.parent}/listItemCompletions`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.listItemCompletion ?? {});
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "ListItemCompletionService",
        method: "CreateListItemCompletion",
      }) as Promise<ListItemCompletion>;
    },
    ListListItemCompletions(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.parent) {
        throw new Error("missing required field request.parent");
      }
      const path = `lists/v1alpha1/${request.parent}/listItemCompletions`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.pageSize) {
        queryParams.push(`pageSize=${encodeURIComponent(request.pageSize.toString())}`)
      }
      if (request.pageToken) {
        queryParams.push(`pageToken=${encodeURIComponent(request.pageToken.toString())}`)
      }
      if (request.filter) {
        queryParams.push(`filter=${encodeURIComponent(request.filter.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "ListItemCompletionService",
        method: "ListListItemCompletions",
      }) as Promise<ListListItemCompletionsResponse>;
    },
    UpdateListItemCompletion(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.listItemCompletion?.name) {
        throw new Error("missing required field request.list_item_completion.name");
      }
      const path = `lists/v1alpha1/${request.listItemCompletion.name}`; // eslint-disable-line quotes
      const body = JSON.stringify(request?.listItemCompletion ?? {});
      const queryParams: string[] = [];
      if (request.updateMask) {
        queryParams.push(`updateMask=${encodeURIComponent(request.updateMask.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PATCH",
        body,
      }, {
        service: "ListItemCompletionService",
        method: "UpdateListItemCompletion",
      }) as Promise<ListItemCompletion>;
    },
    DeleteListItemCompletion(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `lists/v1alpha1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }, {
        service: "ListItemCompletionService",
        method: "DeleteListItemCompletion",
      }) as Promise<ListItemCompletion>;
    },
    GetListItemCompletion(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.name) {
        throw new Error("missing required field request.name");
      }
      const path = `lists/v1alpha1/${request.name}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "ListItemCompletionService",
        method: "GetListItemCompletion",
      }) as Promise<ListItemCompletion>;
    },
  };
}

// @@protoc_insertion_point(typescript-http-eof)
