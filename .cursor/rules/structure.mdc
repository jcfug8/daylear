---
description: 
globs: 
alwaysApply: true
---
THe backend is develpoed in go. The basic file structure and architecture of the daylear backend. If there are way the code can be changed to better fit the architecture described, you are welcome to suggest improvements when asked.

The server files all live in the /server directory. The only exception are the protos used for a majority of the api. Those live in /api but they are generated by buf base of the buf.gen.yaml and buf.yaml files in the root. They are set up to generate into the ./server/genapi directory. If changes are made to the protos you must run `buf format -w` and `buf generate`.

# Backend Architecture:
We follow a form Hexagonal Architecture or Ports and Adapters. There are 7 main sections of the code.
## Adapters
Found in /server/adapters. In hexagonal architecture (also known as ports and adapters), an adapter is a component that translates between the application's internal domain logic and the external world. They are separated into the type of adapter then into the main technology or library they use. We also have a directory, servers, that holds some generic logic thats can be used across adapters.
- They are at the outermost layer of our application
- Primary adapters depend on the domain and Secondary adapter are depended on by the domain
- They implement interfaces defined by the ports
- They handle technical concerns like:
  - Data format conversion
  - Protocol handling
  - Error translation
  - External system specifics
Some Best Practices:
  - Keep adapters thin and focused on translation
  - Don't put business logic in adapters
  - Use interfaces to define the contract between domain and adapters
  - Handle external system specifics in adapters, not in domain logic
The errors returned must be on of the errors defined in the port.
### Clients
Also known as Primary/Driving Adapters. They handle incomming requests (e.g., HTTP controllers, gRPC services)
### Services
Also known as Secondary/Driven Adapters. They handle outgoing requests (e.g., database repositories, external API clients)
### Servers
Holds generic logic for listeners or middleware.
## Core
Found in /server/core. This hold types or logic that any adpater or the domain can use. It holds the domain entities and other helpful libraries.
## Domain
Found in /server/domain. The domain portion in hexagonal architecture is the central part that contains the business logic and rules.
Some Best Practices:
- Business Rules:
  - Enforce business constraints
  - Implement business workflows
  - Handle business-level validation
- Keep Domain Pure:
  - No external dependencies
  - No framework-specific code
  - No technical concerns
- Use Domain-Specific Types:
  - Custom types for business concepts
  - Strong typing for business rules
  - Clear domain language
- Handle Business Errors:
  - Domain-specific error types
  - Clear error messages
  - Proper error handling
## CTL
Found in /server/daylearctl. This contains the main entry point of the application
## Ports
Found in /server/ports. Ports in hexagonal architecture serve as the interfaces that define how your application interacts with the outside world.
Primary Purpose of Ports:
- Define contracts for external interactions
- Keep the domain independent of external implementations
- Allow for flexible swapping of external implementations
- Provide clear boundaries between domain and external systems
Best Practices:
- Keep Ports Focused:
  - One port per external system
  - Clear and specific interfaces
  - Domain-oriented methods
- Use Domain Models:
  - Ports should use domain models
  - Avoid external types in ports
  - Keep translation in adapters
A port should also have a set of errors that it can return. An adapter, or the domain, should only return these specific errors.
## Configuration
Found in /server/.env and used/parsed by server/adapters/clients/config.
## API
Our api is mainly build off of protos/grpc along with a few pure http endpoints for authentication. On top of our grpc api we use grpcgateway found in server/adapters/services/http/grpcgateway to alow client to purely use http. With our grpc api we do our best to strictly follow google AIP's.

## Database Layer
Currently we use GORM in our database layer. Our gorm/database models/structs are found in server/adapters/clients/gorm/model along with some methods and type to facilitate converting field masks into the database columns. We use gorm's auto migrate so gorm struct tags are needed.

# Running and Deploying
## Local Developement
We use docker along with docker compose for local development of the backend
## Deploying
We use github actions with digital ocean to deploy the backend.

