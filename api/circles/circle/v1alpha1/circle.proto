syntax = "proto3";

package api.circles.circle.v1alpha1;

import "api/types/accept_target.proto";
import "api/types/access_state.proto";
import "api/types/permission_level.proto";
import "api/types/visibility_level.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/field_mask.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  security_definitions: {
    security: {
      key: "BearerAuth"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Bearer token for authentication"
      }
    }
  }
  security: {
    security_requirement: {
      key: "BearerAuth"
      value: {}
    }
  }
};

// the circle service
service CircleService {
  // create a circle
  rpc CreateCircle(CreateCircleRequest) returns (Circle) {
    option (google.api.method_signature) = "circle,circle_id";
    option (google.api.http) = {
      post: "/circles/v1alpha1/circles"
      body: "circle"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a circle"
      description: "Creates a new circle with the provided details."
      tags: "CircleService"
    };
  }

  // list circles
  rpc ListCircles(ListCirclesRequest) returns (ListCirclesResponse) {
    option (google.api.method_signature) = "parent";
    option (google.api.http) = {
      get: "/circles/v1alpha1/circles"
      additional_bindings: {get: "/circles/v1alpha1/{parent=users/*}/circles"}
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List circles"
      description: "Retrieves a paginated list of circles. Supports filtering and pagination."
      tags: "CircleService"
    };
  }

  // update a circle
  rpc UpdateCircle(UpdateCircleRequest) returns (Circle) {
    option (google.api.method_signature) = "circle,update_mask";
    option (google.api.http) = {
      patch: "/circles/v1alpha1/{circle.name=circles/*}"
      body: "circle"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update a circle"
      description: "Updates the details of an existing circle."
      tags: "CircleService"
    };
  }

  // delete` a circle
  rpc DeleteCircle(DeleteCircleRequest) returns (Circle) {
    option (google.api.method_signature) = "name";
    option (google.api.http) = {delete: "/circles/v1alpha1/{name=circles/*}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete a circle"
      description: "Deletes a circle by resource name."
      tags: "CircleService"
    };
  }

  // get a circle
  rpc GetCircle(GetCircleRequest) returns (Circle) {
    option (google.api.method_signature) = "name";
    option (google.api.http) = {get: "/circles/v1alpha1/{name=circles/*}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get a circle"
      description: "Retrieves a single circle by resource name."
      tags: "CircleService"
    };
  }
}

// the main user circle
message Circle {
  option (google.api.resource) = {
    type: "api.circles.circle.v1alpha1/Circle"
    pattern: "circles/{circle}"
    pattern: "users/{user}/circles/{circle}"
    plural: "circles"
    singular: "circle"
  };

  // the name of the circle
  string name = 1 [(google.api.field_behavior) = IDENTIFIER];

  // the title of the circle
  string title = 2 [(google.api.field_behavior) = REQUIRED];

  // the description of the circle
  string description = 7 [(google.api.field_behavior) = OPTIONAL];

  // the unique handle for the circle (like a username, must be unique, user-friendly, and can be used for sharing)
  string handle = 6 [(google.api.field_behavior) = OPTIONAL];

  // the image url for the circle
  string image_uri = 3 [(google.api.field_behavior) = OPTIONAL];

  // the visibility of the circle
  api.types.VisibilityLevel visibility = 4 [(google.api.field_behavior) = REQUIRED];

  // circle access data
  CircleAccess circle_access = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // the circle access details
  message CircleAccess {
    // the name of the circle access
    string name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

    // the permission of the circle
    api.types.PermissionLevel permission_level = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

    // the access state of the user to the circle
    api.types.AccessState state = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

    // the accept target of the access (the user or circle that is accepting the access)
    api.types.AcceptTarget accept_target = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
  }
}

// the request to create a circle
message CreateCircleRequest {
  // the circle to create
  Circle circle = 2 [(google.api.field_behavior) = REQUIRED];

  // the id of the circle
  string circle_id = 3 [(google.api.field_behavior) = REQUIRED];
}

// the request to list circles
message ListCirclesRequest {
  // the parent of the circles
  string parent = 1 [
    (google.api.field_behavior) = OPTIONAL,
    (google.api.resource_reference).type = "api.users.user.v1alpha1/User"
  ];

  // the page size
  int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];

  // the page token
  string page_token = 3 [(google.api.field_behavior) = OPTIONAL];

  // used to specify the filter
  string filter = 4 [(google.api.field_behavior) = OPTIONAL];
}

// the response to list circles
message ListCirclesResponse {
  // the circles
  repeated Circle circles = 1;

  // the next page token
  string next_page_token = 2;
}

// the request to update a circle
message UpdateCircleRequest {
  // the circle to update
  Circle circle = 1 [(google.api.field_behavior) = REQUIRED];

  // the fields to update
  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = OPTIONAL];
}

// the request to delete a circle
message DeleteCircleRequest {
  // the name of the circle
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "api.circles.circle.v1alpha1/Circle"
  ];
}

// the request to get a circle
message GetCircleRequest {
  // the name of the circle
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "api.circles.circle.v1alpha1/Circle"
  ];
}
