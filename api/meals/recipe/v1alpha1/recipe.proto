syntax = "proto3";

package api.meals.recipe.v1alpha1;

import "api/types/access_state.proto";
import "api/types/permission_level.proto";
import "api/types/visibility_level.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  security_definitions: {
    security: {
      key: "BearerAuth"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Bearer token for authentication"
      }
    }
  }
  security: {
    security_requirement: {
      key: "BearerAuth"
      value: {}
    }
  }
};

// the recipe service
service RecipeService {
  // create a recipe
  rpc CreateRecipe(CreateRecipeRequest) returns (Recipe) {
    option (google.api.method_signature) = "recipe,recipe_id";
    option (google.api.http) = {
      post: "/meals/v1alpha1/recipes"
      body: "recipe"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a recipe"
      description: "Creates a new recipe with the provided details."
      tags: "RecipeService"
      parameters: {
        headers: {
          name: "X-Daylear-Circle"
          description: "the name of the circle to act as"
          type: STRING
        }
      }
    };
  }

  // list recipes
  rpc ListRecipes(ListRecipesRequest) returns (ListRecipesResponse) {
    option (google.api.method_signature) = "page_size,page_token,filter";
    option (google.api.http) = {get: "/meals/v1alpha1/recipes"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List recipes"
      description: "Retrieves a paginated list of recipes. Supports filtering and pagination."
      tags: "RecipeService"
      parameters: {
        headers: {
          name: "X-Daylear-Circle"
          description: "the name of the circle to act as"
          type: STRING
        }
      }
    };
  }

  // update a recipe
  rpc UpdateRecipe(UpdateRecipeRequest) returns (Recipe) {
    option (google.api.method_signature) = "recipe,update_mask";
    option (google.api.http) = {
      patch: "/meals/v1alpha1/{recipe.name=recipes/*}"
      body: "recipe"
      additional_bindings: {
        patch: "/meals/v1alpha1/{recipe.name=circles/*/recipes/*}"
        body: "recipe"
      }
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update a recipe"
      description: "Updates the details of an existing recipe."
      tags: "RecipeService"
      parameters: {
        headers: {
          name: "X-Daylear-Circle"
          description: "the name of the circle to act as"
          type: STRING
        }
      }
    };
  }

  // delete` a recipe
  rpc DeleteRecipe(DeleteRecipeRequest) returns (Recipe) {
    option (google.api.method_signature) = "name";
    option (google.api.http) = {delete: "/meals/v1alpha1/{name=recipes/*}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete a recipe"
      description: "Deletes a recipe by resource name."
      tags: "RecipeService"
      parameters: {
        headers: {
          name: "X-Daylear-Circle"
          description: "the name of the circle to act as"
          type: STRING
        }
      }
    };
  }

  // get a recipe
  rpc GetRecipe(GetRecipeRequest) returns (Recipe) {
    option (google.api.method_signature) = "name";
    option (google.api.http) = {get: "/meals/v1alpha1/{name=recipes/*}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get a recipe"
      description: "Retrieves a single recipe by resource name."
      tags: "RecipeService"
      parameters: {
        headers: {
          name: "X-Daylear-Circle"
          description: "the name of the circle to act as"
          type: STRING
        }
      }
    };
  }

  // scrape and save a recipe from a uri
  rpc ScrapeRecipe(ScrapeRecipeRequest) returns (ScrapeRecipeResponse) {
    option (google.api.method_signature) = "uri";
    option (google.api.http) = {
      post: "/meals/v1alpha1/recipes:scrape"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Scrape a recipe from a uri"
      description: "Scrapes a recipe from a uri."
      tags: "RecipeService"
      parameters: {
        headers: {
          name: "X-Daylear-Circle"
          description: "the name of the circle to act as"
          type: STRING
        }
      }
    };
  }
}

// the main recipe object
message Recipe {
  option (google.api.resource) = {
    type: "api.meals.recipe.v1alpha1/Recipe"
    pattern: "recipes/{recipe}"
    plural: "recipes"
    singular: "recipe"
  };

  // the name of the recipe
  string name = 1 [(google.api.field_behavior) = IDENTIFIER];

  // the title of the recipe
  string title = 2 [(google.api.field_behavior) = REQUIRED];

  // the description of the recipe
  string description = 3 [(google.api.field_behavior) = OPTIONAL];

  // the steps to make the recipe
  repeated Direction directions = 4 [(google.api.field_behavior) = OPTIONAL];

  // the ingredient groups in the recipe
  repeated IngredientGroup ingredient_groups = 5 [(google.api.field_behavior) = OPTIONAL];

  // image url
  string image_uri = 6 [(google.api.field_behavior) = OPTIONAL];

  // the visibility of the recipe
  api.types.VisibilityLevel visibility = 7 [(google.api.field_behavior) = REQUIRED];

  // the access details for the current user/circle
  RecipeAccess recipe_access = 10 [(google.api.field_behavior) = OUTPUT_ONLY];

  // citation or reference to another creative work
  string citation = 11 [(google.api.field_behavior) = OPTIONAL];

  // the duration it takes to cook the recipe
  google.protobuf.Duration cook_duration = 12 [(google.api.field_behavior) = OPTIONAL];

  // the method of cooking, such as Frying, Steaming, etc.
  string cooking_method = 13 [(google.api.field_behavior) = OPTIONAL];

  // the categories of the recipe (e.g., appetizer, entree, etc.)
  repeated string categories = 14 [(google.api.field_behavior) = OPTIONAL];

  // the quantity produced by the recipe (e.g., number of servings)
  string yield_amount = 15 [(google.api.field_behavior) = OPTIONAL];

  // the cuisines of the recipe (e.g., French, Ethiopian, etc.)
  repeated string cuisines = 16 [(google.api.field_behavior) = OPTIONAL];

  // the time the recipe was created (UTC)
  google.protobuf.Timestamp create_time = 17 [(google.api.field_behavior) = OUTPUT_ONLY];

  // the time the recipe was last updated (UTC)
  google.protobuf.Timestamp update_time = 18 [(google.api.field_behavior) = OUTPUT_ONLY];

  // the duration it takes to prepare the recipe
  google.protobuf.Duration prep_duration = 19 [(google.api.field_behavior) = OPTIONAL];

  // the total duration for the recipe
  google.protobuf.Duration total_duration = 20 [(google.api.field_behavior) = OPTIONAL];

  // the directions to make the recipe
  message Direction {
    // the title of the step
    string title = 1 [(google.api.field_behavior) = OPTIONAL];
    // the steps in the instruction
    repeated string steps = 2 [(google.api.field_behavior) = REQUIRED];
  }

  // an ingredient group in a recipe
  message IngredientGroup {
    // the name of the group
    string title = 1 [(google.api.field_behavior) = OPTIONAL];
    // the ingredients in the group
    repeated Ingredient ingredients = 2 [(google.api.field_behavior) = REQUIRED];
  }

  // an ingredient in a recipe
  message Ingredient {
    // the name of the ingredient
    string title = 2 [(google.api.field_behavior) = REQUIRED];
    // wheter the ingredient is optional
    bool optional = 3 [(google.api.field_behavior) = OPTIONAL];
    // the quantity of the ingredient
    double measurement_amount = 4 [(google.api.field_behavior) = OPTIONAL];
    // the type of measurement
    MeasurementType measurement_type = 5 [(google.api.field_behavior) = OPTIONAL];
    // measurment conjunction
    MeasurementConjunction measurement_conjunction = 8 [(google.api.field_behavior) = OPTIONAL];
    // the second quantity of the ingredient
    double second_measurement_amount = 6 [(google.api.field_behavior) = OPTIONAL];
    // the type of measurement for the second quantity
    MeasurementType second_measurement_type = 7 [(google.api.field_behavior) = OPTIONAL];

    // the conjunction of the measurement
    enum MeasurementConjunction {
      // the measurement conjunction is unspecified
      MEASUREMENT_CONJUNCTION_UNSPECIFIED = 0;
      // the measurement conjunction is and
      MEASUREMENT_CONJUNCTION_AND = 1;
      // the measurement conjunction is to
      MEASUREMENT_CONJUNCTION_TO = 2;
    }
  }

  // the type of measurement
  enum MeasurementType {
    // the measurement is in cups
    MEASUREMENT_TYPE_UNSPECIFIED = 0;
    // the measurement is in tablespoons
    MEASUREMENT_TYPE_TABLESPOON = 1;
    // the measurement is in teaspoons
    MEASUREMENT_TYPE_TEASPOON = 2;
    // the measurement is in ounces
    MEASUREMENT_TYPE_OUNCE = 3;
    // the measurement is in pounds
    MEASUREMENT_TYPE_POUND = 4;
    // the measurement is in grams
    MEASUREMENT_TYPE_GRAM = 5;
    // the measurement is in milliliters
    MEASUREMENT_TYPE_MILLILITER = 6;
    // the measurement is in liters
    MEASUREMENT_TYPE_LITER = 7;
    // the measurement is in cups
    MEASUREMENT_TYPE_CUP = 8;
  }

  // the recipe access details
  message RecipeAccess {
    // the name of the recipe access
    string name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

    // the permission of the recipe
    api.types.PermissionLevel permission_level = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

    // the access state of the user to the recipe
    api.types.AccessState state = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  }
}

// the request to create a recipe
message CreateRecipeRequest {
  // the recipe to create
  Recipe recipe = 1 [(google.api.field_behavior) = REQUIRED];

  // the id of the recipe
  string recipe_id = 2 [(google.api.field_behavior) = REQUIRED];
}

// the request to list recipes
message ListRecipesRequest {
  // returned page
  int32 page_size = 1 [(google.api.field_behavior) = OPTIONAL];
  // used to specify the page token
  string page_token = 2 [(google.api.field_behavior) = OPTIONAL];
  // used to specify the filter
  string filter = 3 [(google.api.field_behavior) = OPTIONAL];
}

// the response to list recipes
message ListRecipesResponse {
  // the recipes
  repeated Recipe recipes = 1;
  // the next page token
  string next_page_token = 2;
}

// the request to update a recipe
message UpdateRecipeRequest {
  // the recipe to update
  Recipe recipe = 1 [(google.api.field_behavior) = REQUIRED];

  // the fields to update
  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = OPTIONAL];
}

// the request to delete a recipe
message DeleteRecipeRequest {
  // the name of the recipe to delete
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "api.meals.recipe.v1alpha1/Recipe"
  ];
}

// the request to get a recipe
message GetRecipeRequest {
  // the name of the recipe to get
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "api.meals.recipe.v1alpha1/Recipe"
  ];
}

// the request to scrape a recipe from a url
message ScrapeRecipeRequest {
  // the uri of the recipe
  string uri = 1 [(google.api.field_behavior) = REQUIRED];
}

// the response to scrape a recipe from a url
message ScrapeRecipeResponse {
  // the recipe
  Recipe recipe = 1;
}
