syntax = "proto3";

package api.calendars.calendar.v1alpha1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  security_definitions: {
    security: {
      key: "BearerAuth"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Bearer token for authentication"
      }
    }
  }
  security: {
    security_requirement: {
      key: "BearerAuth"
      value: {}
    }
  }
};

// the event recipe service
service EventRecipeService {
  // create an event recipe
  rpc CreateEventRecipe(CreateEventRecipeRequest) returns (EventRecipe) {
    option (google.api.method_signature) = "parent,event_recipe";
    option (google.api.http) = {
      post: "/calendars/v1alpha1/{parent=calendars/*/events/*}/eventRecipes"
      body: "event_recipe"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create an event recipe"
      description: "Creates a new event recipe for the specified event and recipe."
      tags: "EventRecipeService"
    };
  }
  // get an event recipe
  rpc GetEventRecipe(GetEventRecipeRequest) returns (EventRecipe) {
    option (google.api.method_signature) = "name";
    option (google.api.http) = {get: "/calendars/v1alpha1/{name=calendars/*/events/*/eventRecipes/*}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get an event recipe"
      description: "Retrieves details about a specific event recipe."
      tags: "EventRecipeService"
    };
  }
  // delete an event recipe
  rpc DeleteEventRecipe(DeleteEventRecipeRequest) returns (EventRecipe) {
    option (google.api.method_signature) = "name";
    option (google.api.http) = {delete: "/calendars/v1alpha1/{name=calendars/*/events/*/eventRecipes/*}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete an event recipe"
      description: "Deletes an event recipe by resource name."
      tags: "EventRecipeService"
    };
  }
  // list event recipes
  rpc ListEventRecipes(ListEventRecipesRequest) returns (ListEventRecipesResponse) {
    option (google.api.method_signature) = "parent";
    option (google.api.http) = {get: "/calendars/v1alpha1/{parent=calendars/*/events/*}/eventRecipes"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List event recipes"
      description: "Lists all event recipes in the specified calendar."
      tags: "EventRecipeService"
    };
  }
}

// the event recipe
message EventRecipe {
  option (google.api.resource) = {
    type: "api.calendars.calendar.v1alpha1/EventRecipe"
    pattern: "calendars/{calendar}/events/{event}/eventRecipes/{event_recipe}"
    plural: "eventRecipes"
    singular: "eventRecipe"
  };

  // the name of the event recipe
  string name = 1 [(google.api.field_behavior) = IDENTIFIER];

  // the name of the recipe
  string recipe = 2 [(google.api.field_behavior) = REQUIRED];

  // the create time of the event recipe
  google.protobuf.Timestamp create_time = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// the request to create an event recipe
message CreateEventRecipeRequest {
  // the parent of the event recipe
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).child_type = "api.calendars.calendar.v1alpha1/EventRecipe"
  ];

  // the event recipe to create
  EventRecipe event_recipe = 2 [(google.api.field_behavior) = REQUIRED];
}

// the request to get an event recipe
message GetEventRecipeRequest {
  // the name of the event recipe
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "api.calendars.calendar.v1alpha1/EventRecipe"
  ];
}

// the request to delete an event recipe
message DeleteEventRecipeRequest {
  // the name of the event recipe
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "api.calendars.calendar.v1alpha1/EventRecipe"
  ];
}

// the request to list event recipes
message ListEventRecipesRequest {
  // the parent of the event recipes
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).child_type = "api.calendars.calendar.v1alpha1/EventRecipe"
  ];

  // The maximum number of events to return
  int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];

  // The next_page_token value returned from a previous List request, if any
  string page_token = 3 [(google.api.field_behavior) = OPTIONAL];

  // A filter expression that filters events listed in the response
  string filter = 4 [(google.api.field_behavior) = OPTIONAL];
}

// the response to list event recipes
message ListEventRecipesResponse {
  // the event recipes
  repeated EventRecipe event_recipes = 1;

  // the next page token
  string next_page_token = 2;
}
