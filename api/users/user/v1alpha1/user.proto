syntax = "proto3";

package api.users.user.v1alpha1;

import "api/types/accept_target.proto";
import "api/types/access_state.proto";
import "api/types/permission_level.proto";
import "api/types/visibility_level.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/field_mask.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  security_definitions: {
    security: {
      key: "BearerAuth"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Bearer token for authentication"
      }
    }
  }
  security: {
    security_requirement: {
      key: "BearerAuth"
      value: {}
    }
  }
};

// the user service
service UserService {
  // get a user
  rpc GetUser(GetUserRequest) returns (User) {
    option (google.api.method_signature) = "name";
    option (google.api.http) = {get: "/users/v1alpha1/{name=users/*}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get a user"
      description: "Retrieves a single user by resource name."
      tags: "UserService"
    };
  }

  // list users
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.method_signature) = "parent";
    option (google.api.http) = {
      get: "/users/v1alpha1/users"
      additional_bindings: {get: "/users/v1alpha1/{parent=circles/*}/users"}
      additional_bindings: {get: "/users/v1alpha1/{parent=users/*}/users"}
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List users"
      description: "Retrieves a paginated list of users. Supports filtering and pagination."
      tags: "UserService"
    };
  }

  // update a user
  rpc UpdateUser(UpdateUserRequest) returns (User) {
    option (google.api.method_signature) = "user,update_mask";
    option (google.api.http) = {
      patch: "/users/v1alpha1/{user.name=users/*}"
      body: "user"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update a user"
      description: "Updates the details of a user."
      tags: "UserService"
    };
  }
}

// the main user object with public fields
message User {
  option (google.api.resource) = {
    type: "api.meals.user.v1alpha1/User"
    pattern: "users/{user}"
    pattern: "circles/{circle}/users/{user}"
    pattern: "users/{user}/users/{user}"
    plural: "users"
    singular: "user"
  };

  // the name of the user
  string name = 1 [(google.api.field_behavior) = IDENTIFIER];

  // the username of the user
  string username = 3 [(google.api.field_behavior) = OPTIONAL];

  // the given name of the user
  string given_name = 4 [(google.api.field_behavior) = OPTIONAL];

  // the family name of the user
  string family_name = 5 [(google.api.field_behavior) = OPTIONAL];

  // the image url for the user
  string image_uri = 8 [(google.api.field_behavior) = OPTIONAL];

  // the bio for the user
  string bio = 9 [(google.api.field_behavior) = OPTIONAL];

  // the user access details
  Access access = 7 [(google.api.field_behavior) = OUTPUT_ONLY];

  // the user access details
  message Access {
    // the name of the access
    string name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

    // the requester of the access
    string requester = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

    // the permission of the access
    api.types.PermissionLevel permission_level = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

    // the access state of the user to the access
    api.types.AccessState state = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

    // the accept target of the access
    api.types.AcceptTarget accept_target = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
  }
}

// the request to get a user
message GetUserRequest {
  // the name of the user to get
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "api.meals.user.v1alpha1/User"
  ];
}

// the request to list users
message ListUsersRequest {
  // returned page
  int32 page_size = 1 [(google.api.field_behavior) = OPTIONAL];
  // used to specify the page token
  string page_token = 2 [(google.api.field_behavior) = OPTIONAL];
  // used to specify the filter
  string filter = 3 [(google.api.field_behavior) = OPTIONAL];
  // the parent of the users
  string parent = 4 [
    (google.api.field_behavior) = OPTIONAL,
    (google.api.resource_reference).type = "api.meals.circle.v1alpha1/Circle"
  ];
}

// the response to list users
message ListUsersResponse {
  // the users
  repeated User users = 1;
  // the next page token
  string next_page_token = 2;
}

// the request to update a user
message UpdateUserRequest {
  // the user to update
  User user = 1 [(google.api.field_behavior) = REQUIRED];

  // the fields to update
  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = OPTIONAL];
}
